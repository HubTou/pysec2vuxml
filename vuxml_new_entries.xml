  <vuln vid="1a15b928-5011-4953-8133-d49e24902fe1">
    <topic>py-WsgiDAV -- XSS vulnerability</topic>
    <affects>
      <package>
    <name>py37-WsgiDAV</name>
    <name>py38-WsgiDAV</name>
    <name>py39-WsgiDAV</name>
    <name>py310-WsgiDAV</name>
    <name>py311-WsgiDAV</name>
    <range><lt>4.1.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-xx6g-jj35-pxjv">
      <p>Implementations using this library with directory browsing enabled may be susceptible to Cross Site Scripting (XSS) attacks.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41905</cvename>
      <url>https://osv.dev/vulnerability/GHSA-xx6g-jj35-pxjv</url>
    </references>
    <dates>
      <discovery>2022-11-11</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="17efbe19-4e72-426a-8016-2b4e001c1378">
    <topic>py-wagtail -- stored XSS vulnerability</topic>
    <affects>
      <package>
    <name>py37-wagtail</name>
    <name>py38-wagtail</name>
    <name>py39-wagtail</name>
    <name>py310-wagtail</name>
    <name>py311-wagtail</name>
    <range><lt>4.1.4</lt></range>
    <range><ge>4.2.0</ge><lt>4.2.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-5286-f2rf-35c2">
      <p>A stored cross-site scripting (XSS) vulnerability exists on ModelAdmin views within the Wagtail admin interface.</p>
      <p>A user with a limited-permission editor account for the Wagtail admin could potentially craft pages and documents that, when viewed by a user with higher privileges, could perform actions with that user's credentials.</p>
      <p>The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, and only affects sites with ModelAdmin enabled.</p>
      <p>For page, the vulnerability is in the "Choose a parent page" ModelAdmin view, available when managing pages via ModelAdmin.</p>
      <p>For documents, the vulnerability is in the ModelAdmin Inspect view when displaying document fields.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-28836</cvename>
      <url>https://osv.dev/vulnerability/GHSA-5286-f2rf-35c2</url>
    </references>
    <dates>
      <discovery>2023-04-03</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="2def7c4b-736f-4754-9f03-236fcb586d91">
    <topic>py-wagtail -- DoS vulnerability</topic>
    <affects>
      <package>
    <name>py37-wagtail</name>
    <name>py38-wagtail</name>
    <name>py39-wagtail</name>
    <name>py310-wagtail</name>
    <name>py311-wagtail</name>
    <range><ge>4.2.0</ge><lt>4.2.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-33pv-vcgh-jfg9">
      <p>A memory exhaustion bug exists in Wagtail's handling of uploaded images and documents.</p>
      <p>For both images and documents, files are loaded into memory during upload for additional processing.</p>
      <p>A user with access to upload images or documents through the Wagtail admin interface could upload a file so large that it results in a crash or denial of service.</p>
      <p>The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.</p>
      <p>It can only be exploited by admin users with permission to upload images or documents.</p>
      <p>Image uploads are restricted to 10MB by default, however this validation only happens on the frontend and on the backend after the vulnerable code.</p> 
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-28837</cvename>
      <url>https://osv.dev/vulnerability/GHSA-33pv-vcgh-jfg9</url>
    </references>
    <dates>
      <discovery>2023-04-03</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="181f5e49-b71d-4527-9464-d4624d69acc3">
    <topic>py-treq -- sensitive information leak vulnerability</topic>
    <affects>
      <package>
    <name>py37-treq</name>
    <name>py38-treq</name>
    <name>py39-treq</name>
    <name>py310-treq</name>
    <name>py311-treq</name>
    <range><lt>22.1.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-fhpf-pp6p-55qc">
      <p>Treq's request methods (`treq.get`, `treq.post`, `HTTPClient.request`, `HTTPClient.get`, etc.) accept cookies as a dictionary.</p>
      <p>Such cookies are not bound to a single domain, and are therefore sent to *every* domain ("supercookies").</p>
      <p>This can potentially cause sensitive information to leak upon an HTTP redirect to a different domain., e.g. should `https://example.com` redirect to `http://cloudstorageprovider.com` the latter will receive the cookie `session`.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-23607</cvename>
      <url>https://osv.dev/vulnerability/GHSA-fhpf-pp6p-55qc</url>
    </references>
    <dates>
      <discovery>2022-02-01</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="4eb5dccb-923c-4f18-9cd4-b53f9e28d4d7">
    <topic>py-Scrapy -- DoS vulnerability</topic>
    <affects>
      <package>
    <name>py37-Scrapy</name>
    <name>py38-Scrapy</name>
    <name>py39-Scrapy</name>
    <name>py310-Scrapy</name>
    <name>py311-Scrapy</name>
    <range><le>2.8.0</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>kmike and nramirezuy report:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2017-83">
      <p>Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2017-14158</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2017-83</url>
      <url>https://osv.dev/vulnerability/GHSA-h7wm-ph43-c39p</url>
    </references>
    <dates>
      <discovery>2017-09-05</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="67fe5e5b-549f-4a2a-9834-53f60eaa415e">
    <topic>py-Scrapy -- exposure of sensitive information vulnerability</topic>
    <affects>
      <package>
    <name>py37-Scrapy</name>
    <name>py38-Scrapy</name>
    <name>py39-Scrapy</name>
    <name>py310-Scrapy</name>
    <name>py311-Scrapy</name>
    <range><lt>2.6.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>ranjit-git reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-159">
      <p>Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository scrapy/scrapy prior to 2.6.1.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-0577</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-159</url>
      <url>https://osv.dev/vulnerability/GHSA-cjvr-mfj7-j4j8</url>
    </references>
    <dates>
      <discovery>2022-03-02</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="a5403af6-225e-48ba-b233-bd95ad26434a">
    <topic>py-Scrapy -- cookie injection vulnerability</topic>
    <affects>
      <package>
    <name>py37-Scrapy</name>
    <name>py38-Scrapy</name>
    <name>py39-Scrapy</name>
    <name>py310-Scrapy</name>
    <name>py311-Scrapy</name>
    <range><lt>1.8.2</lt></range>
    <range><ge>2.0.0</ge><lt>2.6.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-mfjm-vh54-3f96">
      <p>Responses from domain names whose public domain name suffix contains 1 or more periods (e.g. responses from `example.co.uk`, given its public domain name suffix is `co.uk`) are able to set cookies that are included in requests to any other domain sharing the same domain name suffix.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <url>https://osv.dev/vulnerability/GHSA-mfjm-vh54-3f96</url>
    </references>
    <dates>
      <discovery>2022-03-01</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="2ad25820-c71a-4e6c-bb99-770c66fe496d">
    <topic>py-Scrapy -- credentials leak vulnerability</topic>
    <affects>
      <package>
    <name>py37-Scrapy</name>
    <name>py38-Scrapy</name>
    <name>py39-Scrapy</name>
    <name>py310-Scrapy</name>
    <name>py311-Scrapy</name>
    <range><lt>1.8.3</lt></range>
    <range><ge>2.0.0</ge><lt>2.6.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-9x8m-2xpf-crp3">
      <p>When the built-in HTTP proxy downloader middleware processes a request with `proxy` metadata, and that `proxy` metadata includes proxy credentials, the built-in HTTP proxy downloader middleware sets the `Proxy-Authentication` header, but only if that header is not already set.</p>
      <p>There are third-party proxy-rotation downloader middlewares that set different `proxy` metadata every time they process a request.</p>
      <p>Because of request retries and redirects, the same request can be processed by downloader middlewares more than once, including both the built-in HTTP proxy downloader middleware and any third-party proxy-rotation downloader middleware.</p>
      <p>These third-party proxy-rotation downloader middlewares could change the `proxy` metadata of a request to a new value, but fail to remove the `Proxy-Authentication` header from the previous value of the `proxy` metadata, causing the credentials of one proxy to be leaked to a different proxy.</p>
      <p>If you rotate proxies from different proxy providers, and any of those proxies requires credentials, you are affected, unless you are handling proxy rotation as described under **Workarounds** below.</p>
      <p>If you use a third-party downloader middleware for proxy rotation, the same applies to that downloader middleware, and installing a patched version of Scrapy may not be enough;</p>
      <p>patching that downloader middlware may be necessary as well.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <url>https://osv.dev/vulnerability/GHSA-9x8m-2xpf-crp3</url>
    </references>
    <dates>
      <discovery>2022-07-29</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="e831dd5a-7d8e-4818-aa1f-17dd495584ec">
    <topic>py-httpx -- input validation vulnerability</topic>
    <affects>
      <package>
    <name>py37-httpx013</name>
    <name>py38-httpx013</name>
    <name>py39-httpx013</name>
    <name>py310-httpx013</name>
    <name>py311-httpx013</name>
    <range><lt>0.20.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>lebr0nli reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-183">
      <p>Encode OSS httpx &lt;=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-41945</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-183</url>
      <url>https://osv.dev/vulnerability/GHSA-h8pj-cxx2-jfg2</url>
    </references>
    <dates>
      <discovery>2022-04-28</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="1e37fa3e-5988-4991-808f-eae98047e2af">
    <topic>py-httpie -- exposure of sensitive information vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-httpie</name>
    <name>py38-httpie</name>
    <name>py39-httpie</name>
    <name>py310-httpie</name>
    <name>py311-httpie</name>
    <range><lt>3.1.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Glyph reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-34">
      <p>HTTPie is a command-line HTTP client.</p>
      <p>HTTPie has the practical concept of sessions, which help users to persistently store some of the state that belongs to the outgoing requests and incoming responses on the disk for further usage.</p>
      <p>Before 3.1.0, HTTPie didn't distinguish between cookies and hosts they belonged.</p>
      <p>This behavior resulted in the exposure of some cookies when there are redirects originating from the actual host to a third party website.</p>
      <p>Users are advised to upgrade.</p>
      <p>There are no known workarounds.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-167">
      <p>Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository httpie/httpie prior to 3.1.0.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-24737</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-34</url>
      <url>https://osv.dev/vulnerability/GHSA-9w4w-cpc8-h2fq</url>
      <cvename>CVE-2022-0430</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-167</url>
      <url>https://osv.dev/vulnerability/GHSA-6pc9-xqrg-wfqw</url>
    </references>
    <dates>
      <discovery>2022-03-07</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="06492bd5-085a-4cc0-9743-e30164bdcb1c">
    <topic>py-flask-security -- user redirect to arbitrary URL vulnerability</topic>
    <affects>
      <package>
    <name>py37-flask-security</name>
    <name>py38-flask-security</name>
    <name>py39-flask-security</name>
    <name>py310-flask-security</name>
    <name>py311-flask-security</name>
    <range><le>3.0.0_1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Snyk reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-cg8c-gc2j-2wf7">
      <p>This affects all versions of package Flask-Security.</p>
      <p>When using the `get_post_logout_redirect` and `get_post_login_redirect` functions, it is possible to bypass URL validation and redirect a user to an arbitrary URL by providing multiple back slashes such as `\\\evil.com/path`.</p>
      <p>This vulnerability is only exploitable if an alternative WSGI server other than Werkzeug is used, or the default behaviour of Werkzeug is modified using `'autocorrect_location_header=False`.</p>
      <p>**Note:** Flask-Security is not maintained anymore.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-23385</cvename>
      <url>https://osv.dev/vulnerability/GHSA-cg8c-gc2j-2wf7</url>
    </references>
    <dates>
      <discovery>2022-08-02</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="252f40cb-618c-47f4-a2cf-1abf30cffbbe">
    <topic>py-Flask-Cors -- directory traversal vulnerability</topic>
    <affects>
      <package>
    <name>py37-Flask-Cors</name>
    <name>py38-Flask-Cors</name>
    <name>py39-Flask-Cors</name>
    <name>py310-Flask-Cors</name>
    <name>py311-Flask-Cors</name>
    <range><lt>3.0.9</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>praetorian-colby-morgan reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-43">
      <p>An issue was discovered in Flask-CORS (aka CORS Middleware for Flask) before 3.0.9.</p>
      <p>It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-25032</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-43</url>
      <url>https://osv.dev/vulnerability/GHSA-xc3p-ff3m-f46v</url>
    </references>
    <dates>
      <discovery>2020-08-31</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="692a5fd5-bb25-4df4-8a0e-eb91581f2531">
    <topic>py-flask-caching -- remote code execution or local privilege escalation vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-flask-caching</name>
    <name>py38-flask-caching</name>
    <name>py39-flask-caching</name>
    <name>py310-flask-caching</name>
    <name>py311-flask-caching</name>
    <range><le>2.0.2</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>subnix reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-13">
      <p>The Flask-Caching extension through 2.0.2 for Flask relies on Pickle for serialization, which may lead to remote code execution or local privilege escalation.</p>
      <p>If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code.</p>	  
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-33026</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-13</url>
      <url>https://osv.dev/vulnerability/GHSA-656c-6cxf-hvcv</url>
    </references>
    <dates>
      <discovery>2021-05-13</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="c2c89dea-2859-4231-8f3b-12be0d475ff">
    <topic>py-django-photologue -- XSS vulnerability</topic>
    <affects>
      <package>
    <name>py37-django-photologue</name>
    <name>py38-django-photologue</name>
    <name>py39-django-photologue</name>
    <name>py310-django-photologue</name>
    <name>py311-django-photologue</name>
    <range><le>3.15_1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>domiee13 reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-287q-jfcp-9vhv">
      <p>A vulnerability was found in django-photologue up to 3.15.1 and classified as problematic.</p>
      <p>Affected by this issue is some unknown functionality of the file photologue/templates/photologue/photo_detail.html of the component Default Template Handler.</p>
      <p>The manipulation of the argument object.caption leads to cross site scripting.</p>
      <p>The attack may be launched remotely.</p>
      <p>Upgrading to version 3.16 is able to address this issue.</p>
      <p>The name of the patch is 960cb060ce5e2964e6d716ff787c72fc18a371e7.</p>
      <p>It is recommended to apply a patch to fix this issue.</p>
      <p>VDB-215906 is the identifier assigned to this vulnerability.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-4526</cvename>
      <url>https://osv.dev/vulnerability/GHSA-287q-jfcp-9vhv</url>
    </references>
    <dates>
      <discovery>2022-12-15</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="cdc685b5-1724-49a1-ad57-2eaab68e9cc0">
    <topic>py-pygments -- multiple DoS vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-pygments</name>
    <name>py38-pygments</name>
    <name>py39-pygments</name>
    <name>py310-pygments</name>
    <name>py311-pygments</name>
    <range><lt>2.7.4</lt></range>
      </package>
      <package>
    <name>py37-pygments-25</name>
    <name>py38-pygments-25</name>
    <name>py39-pygments-25</name>
    <name>py310-pygments-25</name>
    <name>py311-pygments-25</name>
    <range><lt>2.7.4</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Red Hat reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-140">
      <p>An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the "exception" keyword.</p>
    </blockquote>
    <p>Ben Caller reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-141">
      <p>In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions.</p>
      <p>Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS.</p>
      <p>By crafting malicious input, an attacker can cause a denial of service.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-20270</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-140</url>
      <url>https://osv.dev/vulnerability/GHSA-9w8r-397f-prfh</url>
      <cvename>CVE-2021-27291</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-141</url>
      <url>https://osv.dev/vulnerability/GHSA-pq64-v7f5-gqh8</url>
    </references>
    <dates>
      <discovery>2021-03-17</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="c9b3324f-8e03-4ae3-89ce-8098cdc5bfa9">
    <topic>py-markdown2 -- regular expression denial of service vulnerability</topic>
    <affects>
      <package>
    <name>py37-markdown2</name>
    <name>py38-markdown2</name>
    <name>py39-markdown2</name>
    <name>py310-markdown2</name>
    <name>py311-markdown2</name>
    <range><lt>2.4.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Ben Caller reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-20">
      <p>markdown2 &gt;=1.0.1.18, fixed in 2.4.0, is affected by a regular expression denial of service vulnerability.</p>
      <p>If an attacker provides a malicious string, it can make markdown2 processing difficult or delayed for an extended period of time.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-26813</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-20</url>
      <url>https://osv.dev/vulnerability/GHSA-jr9p-r423-9m2r</url>
    </references>
    <dates>
      <discovery>2021-03-03</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="cf6f3465-e996-4672-9458-ce803f29fdb7">
    <topic>py-markdown2 -- XSS vulnerability</topic>
    <affects>
      <package>
    <name>py37-markdown2</name>
    <name>py38-markdown2</name>
    <name>py39-markdown2</name>
    <name>py310-markdown2</name>
    <name>py311-markdown2</name>
    <range><lt>2.3.9</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>TheGrandPew reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-65">
      <p>python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \w+ match succeeds.</p>
      <p>For example, an attack might use elementname@ or elementname- with an onclick attribute.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-11888</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-65</url>
      <url>https://osv.dev/vulnerability/GHSA-fv3h-8x5j-pvgq</url>
    </references>
    <dates>
      <discovery>2020-04-20</discovery>
      <entry>2023-04-15</entry>
    </dates>
  </vuln>

  <vuln vid="83b29e3f-886f-439f-b9a8-72e014479ff9">
    <topic>py-dparse -- REDoS vulnerability</topic>
    <affects>
      <package>
    <name>py37-dparse</name>
    <name>py38-dparse</name>
    <name>py39-dparse</name>
    <name>py310-dparse</name>
    <name>py311-dparse</name>
    <range><lt>0.5.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>yeisonvargasf reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-301">
      <p>dparse is a parser for Python dependency files.</p>
      <p>dparse in versions before 0.5.2 contain a regular expression that is vulnerable to a Regular Expression Denial of Service.</p>
      <p>All the users parsing index server URLs with dparse are impacted by this vulnerability.</p>
      <p>Users unable to upgrade should avoid passing index server URLs in the source file to be parsed.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-39280</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-301</url>
      <url>https://osv.dev/vulnerability/GHSA-8fg9-p83m-x5pq</url>
    </references>
    <dates>
      <discovery>2022-10-06</discovery>
      <entry>2023-04-12</entry>
    </dates>
  </vuln>

<!-- Vulnerabilities below reported at https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=270744 -->
<!-- Vulnerabilities below updated at https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=270795 -->

  <vuln vid="b54abe9d-7024-4d10-98b2-180cf1717766">
    <topic>py-beaker -- arbitrary code execution vulnerability</topic>
    <affects>
      <package>
    <name>py37-beaker</name>
    <name>py38-beaker</name>
    <name>py39-beaker</name>
    <name>py310-beaker</name>
    <name>py311-beaker</name>
    <range><le>1.12.1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>matheusbrat reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-216">
      <p>The Beaker library through 1.12.1 for Python is affected by deserialization of untrusted data, which could lead to arbitrary code execution.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2013-7489</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-216</url>
    </references>
    <dates>
      <discovery>2020-06-26</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="374793ad-2720-4c4a-b86c-fc4a1780deac">
    <topic>py-psutil -- double free vulnerability</topic>
    <affects>
      <package>
    <name>py37-psutil121</name>
    <name>py38-psutil121</name>
    <name>py39-psutil121</name>
    <name>py310-psutil121</name>
    <name>py311-psutil121</name>
    <range><lt>5.6.6</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>ret2libc reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-41">
      <p>psutil (aka python-psutil) through 5.6.5 can have a double free.</p>
      <p>This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2019-18874</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-41</url>
      <url>https://osv.dev/vulnerability/GHSA-qfc5-mcwq-26q8</url>
    </references>
    <dates>
      <discovery>2019-11-12</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="e1b77733-a982-442e-8796-a200571bfcf2">
    <topic>py-ansible -- multiple vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-ansible</name>
    <name>py38-ansible</name>
    <name>py39-ansible</name>
    <name>py310-ansible</name>
    <name>py311-ansible</name>
    <range><le>7.2.0</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>abeluck reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-220">
      <p>A flaw was found in Ansible Base when using the aws_ssm connection plugin as garbage collector is not happening after playbook run is completed.</p>
      <p>Files would remain in the bucket exposing the data.</p>
      <p>This issue affects directly data confidentiality.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-221">
      <p>A flaw was found in Ansible Base when using the aws_ssm connection plugin as there is no namespace separation for file transfers.</p>
      <p>Files are written directly to the root bucket, making possible to have collisions when running multiple ansible processes.</p>
      <p>This issue affects mainly the service availability.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-25635</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-220</url>
      <cvename>CVE-2020-25636</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-221</url>
    </references>
    <dates>
      <discovery>2020-10-05</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="f418cd50-561a-49a2-a133-965d03ede72a">
    <topic>py-ansible -- data leak vulnerability</topic>
    <affects>
      <package>
    <name>py37-ansible</name>
    <name>py38-ansible</name>
    <name>py39-ansible</name>
    <name>py310-ansible</name>
    <name>py311-ansible</name>
    <range><le>7.1.0</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Tapas jena reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-125">
      <p>A flaw was found in Ansible where the secret information present in async_files are getting disclosed when the user changes the jobdir to a world readable directory.</p>
      <p>Any secret information in an async status file will be readable by a malicious user on that system.</p>
      <p>This flaw affects Ansible Tower 3.7 and Ansible Automation Platform 1.2.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-3532</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-125</url>
    </references>
    <dates>
      <discovery>2021-06-09</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="2acdf364-9f8d-4aaf-8d1b-867fdfd771c6">
    <topic>py-kerberos -- DoS and MitM vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-kerberos</name>
    <name>py38-kerberos</name>
    <name>py39-kerberos</name>
    <name>py310-kerberos</name>
    <name>py311-kerberos</name>
    <range><le>1.3.1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>macosforgebot reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2017-49">
      <p>The checkPassword function in python-kerberos does not authenticate the KDC it attempts to communicate with, which allows remote attackers to cause a denial of service (bad response), or have other unspecified impact by performing a man-in-the-middle attack.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2015-3206</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2017-49</url>
    </references>
    <dates>
      <discovery>2017-08-25</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="c1a8ed1c-2814-4260-82aa-9e37c83aac93">
    <topic>py-cryptography -- includes a vulnerable copy of OpenSSL</topic>
    <affects>
      <package>
    <name>py37-cryptography</name>
    <name>py38-cryptography</name>
    <name>py39-cryptography</name>
    <name>py310-cryptography</name>
    <name>py311-cryptography</name>
    <range><lt>39.0.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-x4qr-2fvf-3mr5">
      <p>pyca/cryptography's wheels include a statically linked copy of OpenSSL.</p>
      <p>The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue.</p>
      <p>More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20221213.txt and https://www.openssl.org/news/secadv/20230207.txt.</p>
      <p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL.</p>
      <p>Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-0286</cvename>
      <url>https://osv.dev/vulnerability/GHSA-x4qr-2fvf-3mr5</url>
    </references>
    <dates>
      <discovery>2023-02-08</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="a32ef450-9781-414b-a944-39f2f61677f2">
    <topic>py-cryptography -- allows programmers to misuse an API</topic>
    <affects>
      <package>
    <name>py37-cryptography</name>
    <name>py38-cryptography</name>
    <name>py39-cryptography</name>
    <name>py310-cryptography</name>
    <name>py311-cryptography</name>
    <range><ge>1.8</ge><lt>39.0.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>alex reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-w7pp-m8wf-vj6r">
      <p>Previously, `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers.</p>
      <p>This would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python.</p>
      <p>This is a soundness bug -- it allows programmers to misuse an API, it cannot be exploited by attacker controlled data alone.</p>
      <p>This now correctly raises an exception.</p>
      <p>This issue has been present since `update_into` was originally introduced in cryptography 1.8.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-23931</cvename>
      <url>https://osv.dev/vulnerability/GHSA-w7pp-m8wf-vj6r</url>
    </references>
    <dates>
      <discovery>2023-02-07</discovery>
      <entry>2023-04-10</entry>
    </dates>
  </vuln>

  <vuln vid="ae132c6c-d716-11ed-956f-7054d21a9e2a">
    <topic>py-tensorflow -- denial of service vulnerability</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.8.4</lt></range>
    <range><ge>2.9.0</ge><lt>2.9.3</lt></range>
    <range><ge>2.10.0</ge><lt>2.10.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Kang Hong Jin, Neophytos Christou, 刘力源 and Pattarakrit Rattankul report:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-cqvq-fvhr-v6hc">
      <p>Another instance of CVE-2022-35935, where `SobolSample` is vulnerable to a denial of service via assumed scalar inputs, was found and fixed.</p>
    </blockquote>
    <p>Pattarakrit Rattankul reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-xf83-q765-xm6m">
      <p>Another instance of CVE-2022-35991, where `TensorListScatter` and `TensorListScatterV2` crash via non scalar inputs in`element_shape`, was found in eager mode and fixed.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-35935</cvename>
      <url>https://osv.dev/vulnerability/GHSA-cqvq-fvhr-v6hc</url>
      <cvename>CVE-2022-35991</cvename>
      <url>https://osv.dev/vulnerability/GHSA-xf83-q765-xm6m</url>
    </references>
    <dates>
      <discovery>2022-11-21</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="52311651-f100-4720-8c62-0887dad6d321">
    <topic>py-tensorflow -- unchecked argument causing crash</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.7.2</lt></range>
    <range><ge>2.8.0</ge><lt>2.8.1</lt></range>
    <range><ge>2.9.0</ge><lt>2.9.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Jingyi Shi reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-mgmh-g2v6-mqw5">
      <p>The 'AvgPoolOp' function takes an argument `ksize` that must be positive but is not checked.</p>
      <p>A negative `ksize` can trigger a `CHECK` failure and crash the program.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-35941</cvename>
      <url>https://osv.dev/vulnerability/GHSA-mgmh-g2v6-mqw5</url>
    </references>
    <dates>
      <discovery>2022-09-16</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="951b513a-9f42-436d-888d-2162615d0fe4">
    <topic>py-pymatgen -- regular expression denial of service</topic>
    <affects>
      <package>
    <name>py37-pymatgen</name>
    <name>py38-pymatgen</name>
    <name>py39-pymatgen</name>
    <name>py310-pymatgen</name>
    <name>py311-pymatgen</name>
    <range><le>2022.9.21</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-5jqp-885w-xj32">
      <p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the pymatgen PyPI package, when an attacker is able to supply arbitrary input to the GaussianInput.from_string method.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-42964</cvename>
      <url>https://osv.dev/vulnerability/GHSA-5jqp-885w-xj32</url>
    </references>
    <dates>
      <discovery>2022-11-10</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="e87a9326-dd35-49fc-b20b-f57cbebaae87">
    <topic>py-nicotine-plus -- Denial of service vulnerability</topic>
    <affects>
      <package>
    <name>py37-nicotine-plus</name>
    <name>py38-nicotine-plus</name>
    <name>py39-nicotine-plus</name>
    <name>py310-nicotine-plus</name>
    <name>py311-nicotine-plus</name>
    <range><lt>3.2.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>ztauras reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-p4v2-r99v-wjc2">
      <p>Denial of service (DoS) vulnerability in Nicotine+ starting with version 3.0.3 and prior to version 3.2.1 allows a user with a modified Soulseek client to crash Nicotine+ by sending a file download request with a file path containing a null character.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-45848</cvename>
      <url>https://osv.dev/vulnerability/GHSA-p4v2-r99v-wjc2</url>
    </references>
    <dates>
      <discovery>2022-03-16</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="93db4f92-9997-4f4f-8614-3963d9e2b0ec">
    <topic>py-slixmpp -- incomplete SSL certificate validation</topic>
    <affects>
      <package>
    <name>py37-slixmpp</name>
    <name>py38-slixmpp</name>
    <name>py39-slixmpp</name>
    <name>py310-slixmpp</name>
    <name>py311-slixmpp</name>
    <range><lt>1.8.3</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <blockquote cite="https://osv.dev/vulnerability/GHSA-q6cq-m9gm-6q2f">
      <p>Slixmpp before 1.8.3 lacks SSL Certificate hostname validation in XMLStream, allowing an attacker to pose as any server in the eyes of Slixmpp.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-45197</cvename>
      <url>https://osv.dev/vulnerability/GHSA-q6cq-m9gm-6q2f</url>
    </references>
    <dates>
      <discovery>2022-12-25</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="b31f7029-817c-4c1f-b7d3-252de5283393">
    <topic>py-suds -- vulnerable to symlink attacks</topic>
    <affects>
      <package>
    <name>py37-suds</name>
    <name>py38-suds</name>
    <name>py39-suds</name>
    <name>py310-suds</name>
    <name>py311-suds</name>
    <range><le>1.1.2</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>SUSE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2013-32">
      <p>cache.py in Suds 0.4, when tempdir is set to None, allows local users to redirect SOAP queries and possibly have other unspecified impact via a symlink attack on a cache file with a predictable name in /tmp/suds/.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2013-2217</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2013-32</url>
    </references>
    <dates>
      <discovery>2013-09-23</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="b692a49c-9ae7-4958-af21-cbf8f5b819ea">
    <topic>py-impacket -- multiple path traversal vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-impacket</name>
    <name>py38-impacket</name>
    <name>py39-impacket</name>
    <name>py310-impacket</name>
    <name>py311-impacket</name>
    <range><ge>0.9.10</ge><lt>0.9.23</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>asolino reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-17">
      <p>Multiple path traversal vulnerabilities exist in smbserver.py in Impacket through 0.9.22. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ../ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing /etc/shadow or an SSH authorized key.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-31800</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-17</url>
      <url>https://osv.dev/vulnerability/GHSA-mj63-64x7-57xf</url>
    </references>
    <dates>
      <discovery>2021-05-05</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="326b2f3e-6fc7-4661-955d-a772760db9cf">
    <topic>py-tflite -- buffer overflow vulnerability</topic>
    <affects>
      <package>
    <name>py37-tflite</name>
    <name>py38-tflite</name>
    <name>py39-tflite</name>
    <name>py310-tflite</name>
    <name>py311-tflite</name>
    <range><lt>2.8.4</lt></range>
    <range><ge>2.9.0</ge><lt>2.9.3</lt></range>
    <range><ge>2.10.0</ge><lt>2.10.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Thibaut Goetghebuer-Planchon reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-h6q3-vv32-2cq5">
      <p>The reference kernel of the CONV_3D_TRANSPOSE TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result.</p>
      <p>Instead of `data_ptr += num_channels;` it should be `data_ptr += output_num_channels;` as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels &gt; output_num_channels.</p>
      <p>An attacker can craft a model with a specific number of input channels in a way similar to the attached example script.</p>
      <p>It is then possible to write specific values through the bias of the layer outside the bounds of the buffer.</p>
      <p>This attack only works if the reference kernel resolver is used in the interpreter (i.e. `experimental_op_resolver_type=tf.lite.experimental.OpResolverType.BUILTIN_REF` is used).</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41894</cvename>
      <url>https://osv.dev/vulnerability/GHSA-h6q3-vv32-2cq5</url>
    </references>
    <dates>
      <discovery>2022-11-21</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="d82bcd2b-5cd6-421c-8179-b3ff0231029f">
    <topic>py-tflite -- denial of service vulnerability</topic>
    <affects>
      <package>
    <name>py37-tflite</name>
    <name>py38-tflite</name>
    <name>py39-tflite</name>
    <name>py310-tflite</name>
    <name>py311-tflite</name>
    <range><lt>2.3.4</lt></range>
    <range><ge>2.4.0</ge><lt>2.4.3</lt></range>
    <range><ge>2.5.0</ge><lt>2.5.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Yakun Zhang of Baidu Security reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-wf5p-c75w-w3wh">
      <p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-37689</cvename>
      <url>https://osv.dev/vulnerability/GHSA-wf5p-c75w-w3wh</url>
    </references>
    <dates>
      <discovery>2021-08-25</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="a0509648-65ce-4a1b-855e-520a75bd2549">
    <topic>py-cinder -- unauthorized data access</topic>
    <affects>
      <package>
    <name>py37-cinder</name>
    <name>py38-cinder</name>
    <name>py39-cinder</name>
    <name>py310-cinder</name>
    <name>py311-cinder</name>
    <range><lt>19.1.2</lt></range>
    <range><ge>20.0.0</ge><lt>20.0.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Utkarsh Gupta reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-7h75-hwxx-qpgc">
      <p>An issue was discovered in OpenStack Cinder before 19.1.2, 20.x before 20.0.2, and 21.0.0; Glance before 23.0.1, 24.x before 24.1.1, and 25.0.0; and Nova before 24.1.2, 25.x before 25.0.2, and 26.0.0.</p>
      <p>By supplying a specially created VMDK flat image that references a specific backing file path, an authenticated user may convince systems to return a copy of that file's contents from the server, resulting in unauthorized access to potentially sensitive data.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-47951</cvename>
      <url>https://osv.dev/vulnerability/GHSA-7h75-hwxx-qpgc</url>
    </references>
    <dates>
      <discovery>2023-01-27</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

  <vuln vid="f4a94232-7864-4afb-bbf9-ff2dc8e288d1">
    <topic>py-cinder -- data leak</topic>
    <affects>
      <package>
    <name>py37-cinder</name>
    <name>py38-cinder</name>
    <name>py39-cinder</name>
    <name>py310-cinder</name>
    <name>py311-cinder</name>
    <range><le>12.0.9</le></range>
    <range><ge>13.0.0</ge><le>13.0.9</le></range>
    <range><ge>14.0.0</ge><le>14.3.1</le></range>
    <range><ge>15.0.0</ge><le>15.6.0</le></range>
    <range><ge>16.0.0</ge><le>16.4.2</le></range>
    <range><ge>17.0.0</ge><le>17.4.0</le></range>
    <range><ge>18.0.0</ge><le>18.2.1</le></range>
    <range><ge>19.0.0</ge><le>19.2.0</le></range>
    <range><ge>20.0.0</ge><le>20.1.0</le></range>
    <range><ge>21.0.0</ge><le>21.1.0</le></range>
    <range><ge>22.0.0</ge><le>22.0.0.0rc2</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Duncan Thomas reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-qhch-g8qr-p497">
      <p>The (1) GlusterFS and (2) Linux Smbfs drivers in OpenStack Cinder before 2014.1.3 allows remote authenticated users to obtain file data from the Cinder-volume host by cloning and attaching a volume with a crafted qcow2 header.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2014-3641</cvename>
      <url>https://osv.dev/vulnerability/GHSA-qhch-g8qr-p497</url>
    </references>
    <dates>
      <discovery>2022-05-17</discovery>
      <entry>2023-04-09</entry>
    </dates>
  </vuln>

<!-- Vulnerabilities below reported at https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=270723 -->

  <vuln vid="f767d615-01db-47e9-b4ab-07bb8d3409fd">
    <topic>py-cinder -- insecure-credentials flaw</topic>
    <affects>
      <package>
    <name>py37-cinder</name>
    <name>py38-cinder</name>
    <name>py39-cinder</name>
    <name>py310-cinder</name>
    <name>py311-cinder</name>
    <range><lt>14.1.0</lt></range>
    <range><ge>15.0.0</ge><lt>15.2.0</lt></range>
    <range><ge>16.0.0</ge><lt>15.1.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>OpenStack project reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-228">
      <p>An insecure-credentials flaw was found in all openstack-cinder versions before openstack-cinder 14.1.0, all openstack-cinder 15.x.x versions before openstack-cinder 15.2.0 and all openstack-cinder 16.x.x versions before openstack-cinder 16.1.0.</p>
      <p>When using openstack-cinder with the Dell EMC ScaleIO or VxFlex OS backend storage driver, credentials for the entire backend are exposed in the ``connection_info`` element in all Block Storage v3 Attachments API calls containing that element.</p>
      <p>This flaw enables an end-user to create a volume, make an API call to show the attachment detail information, and retrieve a username and password that may be used to connect to another user's volume.</p>
      <p>Additionally, these credentials are valid for the ScaleIO or VxFlex OS Management API, should an attacker discover the Management API endpoint.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-10755</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-228</url>
    </references>
    <dates>
      <discovery>2020-06-10</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="e5d117b3-2153-4129-81ed-42b0221afa78">
    <topic>py-OWSLib -- arbitrary file read vulnerability</topic>
    <affects>
      <package>
    <name>py37-OWSLib</name>
    <name>py38-OWSLib</name>
    <name>py39-OWSLib</name>
    <name>py310-OWSLib</name>
    <name>py311-OWSLib</name>
    <range><lt>0.28.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Jorge Rosillo reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-8h9c-r582-mggc">
      <p>OWSLib's XML parser (which supports both `lxml` and `xml.etree`) does not disable entity resolution for `lxml`, and could lead to arbitrary file reads from an attacker-controlled XML payload.</p>
      <p>This affects all XML parsing in the codebase.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-27476</cvename>
      <url>https://osv.dev/vulnerability/GHSA-8h9c-r582-mggc</url>
    </references>
    <dates>
      <discovery>2023-03-07</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="17083017-d993-43eb-8aaf-7138f4486d1c">
    <topic>py-unicorn -- sandbox escape and arbitrary code execution vulnerability</topic>
    <affects>
      <package>
    <name>py37-unicorn</name>
    <name>py38-unicorn</name>
    <name>py39-unicorn</name>
    <name>py310-unicorn</name>
    <name>py311-unicorn</name>
    <range><lt>2.0.0rc1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>jwang-a reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-868">
      <p>An issue was discovered in split_region in uc.c in Unicorn Engine before 2.0.0-rc5.</p>
      <p>It allows local attackers to escape the sandbox.</p>
      <p>An attacker must first obtain the ability to execute crafted code in the target sandbox in order to exploit this vulnerability.</p>
      <p>The specific flaw exists within the virtual memory manager.</p>
      <p>The issue results from the faulty comparison of GVA and GPA while calling uc_mem_map_ptr to free part of a claimed memory block.</p>
      <p>An attacker can leverage this vulnerability to escape the sandbox and execute arbitrary code on the host machine.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-44078</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-868</url>
    </references>
    <dates>
      <discovery>2021-12-26</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="43e9ffd4-d6e0-11ed-956f-7054d21a9e2a">
    <topic>py-pycares -- domain hijacking vulnerability</topic>
    <affects>
      <package>
    <name>py37-pycares</name>
    <name>py38-pycares</name>
    <name>py39-pycares</name>
    <name>py310-pycares</name>
    <name>py311-pycares</name>
    <range><lt>4.2.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Philipp Jeitner and Haya Shulman report:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-c58j-88f5-h53f">
      <p>A flaw was found in c-ares library, where a missing input validation check of host names returned by DNS (Domain Name Servers) can lead to output of wrong hostnames which might potentially lead to Domain Hijacking.</p>
      <p>The highest threat from this vulnerability is to confidentiality and integrity as well as system availability.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-3672</cvename>
      <url>https://osv.dev/vulnerability/GHSA-c58j-88f5-h53f</url>
    </references>
    <dates>
      <discovery>2021-06-11</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="1b38aec4-4149-4c7d-851c-3c4de3a1fbd0">
    <topic>py-setuptools -- denial of service vulnerability</topic>
    <affects>
      <package>
    <name>py37-setuptools</name>
    <name>py38-setuptools</name>
    <name>py39-setuptools</name>
    <name>py310-setuptools</name>
    <name>py311-setuptools</name>
    <range><lt>65.5.1</lt></range>
      </package>
      <package>
    <name>py37-setuptools58</name>
    <name>py38-setuptools58</name>
    <name>py39-setuptools58</name>
    <name>py310-setuptools58</name>
    <name>py311-setuptools58</name>
    <range><lt>65.5.1</lt></range>
      </package>
      <package>
    <name>py27-setuptools44</name>
    <range><lt>65.5.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>SCH227 reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-r9hx-vwmv-q579">
      <p>Python Packaging Authority (PyPA)'s setuptools is a library designed to facilitate packaging Python projects.</p>
      <p>Setuptools version 65.5.0 and earlier could allow remote attackers to cause a denial of service by fetching malicious HTML from a PyPI package or custom PackageIndex page due to a vulnerable Regular Expression in `package_index`.</p>
      <p>This has been patched in version 65.5.1.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-40897</cvename>
      <url>https://osv.dev/vulnerability/GHSA-r9hx-vwmv-q579</url>
    </references>
    <dates>
      <discovery>2022-12-23</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="187ab98e-2953-4495-b379-4060bd4b75ee">
    <cancelled superseded="1b38aec4-4149-4c7d-851c-3c4de3a1fbd0"/>
  </vuln>

  <vuln vid="24da150a-33e0-4fee-b4ee-2c6b377d3395">
    <cancelled superseded="1b38aec4-4149-4c7d-851c-3c4de3a1fbd0"/>
  </vuln>

  <vuln vid="15dae5cc-9ee6-4577-a93e-2ab57780e707">
    <topic>py-sentry-sdk -- sensitive cookies leak</topic>
    <affects>
      <package>
    <name>py37-sentry-sdk</name>
    <name>py38-sentry-sdk</name>
    <name>py39-sentry-sdk</name>
    <name>py310-sentry-sdk</name>
    <name>py311-sentry-sdk</name>
    <range><lt>1.14.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Tom Wolters reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-29pr-6jr8-q5jm">
      <p>When using the Django integration of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry.</p>
      <p>These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-28117</cvename>
      <url>https://osv.dev/vulnerability/GHSA-29pr-6jr8-q5jm</url>
    </references>
    <dates>
      <discovery>2023-03-21</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="28a37df6-ba1a-4eed-bb64-623fc8e8dfd0">
    <topic>py-py -- Regular expression Denial of Service vulnerability</topic>
    <affects>
      <package>
    <name>py37-py</name>
    <name>py38-py</name>
    <name>py39-py</name>
    <name>py310-py</name>
    <name>py311-py</name>
    <range><le>1.11.0</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>SCH227 reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-42969">
      <p>The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-42969</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-42969</url>
      <url>https://osv.dev/vulnerability/GHSA-w596-4wvx-j9j6</url>
    </references>
    <dates>
      <discovery>2022-11-04</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="845f8430-d0ee-4134-ae35-480a3e139b8a">
    <topic>py-joblib -- arbitrary code execution</topic>
    <affects>
      <package>
    <name>py37-joblib</name>
    <name>py38-joblib</name>
    <name>py39-joblib</name>
    <name>py310-joblib</name>
    <name>py311-joblib</name>
    <range><lt>1.2.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>jimlinntu reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2022-288">
      <p>The package joblib from 0 and before 1.2.0 are vulnerable to Arbitrary Code Execution via the pre_dispatch flag in Parallel() class due to the eval() statement.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-21797</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2022-288</url>
      <url>https://osv.dev/vulnerability/GHSA-6hrg-qmvc-2xh8</url>
    </references>
    <dates>
      <discovery>2022-09-26</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="de970aef-d60e-466b-8e30-1ae945a047f1">
    <topic>py-configobj -- vulnerable to Regular Expression Denial of Service</topic>
    <affects>
      <package>
    <name>py37-configobj</name>
    <name>py38-configobj</name>
    <name>py39-configobj</name>
    <name>py310-configobj</name>
    <name>py311-configobj</name>
    <range><le>5.0.6_1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>DarkTinia reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-c33w-24p9-8m24">
      <p>All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\((.*)\).</p>
      <p>**Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-26112</cvename>
      <url>https://osv.dev/vulnerability/GHSA-c33w-24p9-8m24</url>
    </references>
    <dates>
      <discovery>2023-04-03</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="0a38a0d9-757f-4ac3-9561-b439e933dfa9">
    <topic>py-celery -- command injection vulnerability</topic>
    <affects>
      <package>
    <name>py37-celery</name>
    <name>py38-celery</name>
    <name>py39-celery</name>
    <name>py310-celery</name>
    <name>py311-celery</name>
    <range><lt>5.2.2</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Snyk reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2021-858">
      <p>This affects the package celery before 5.2.2.</p>
      <p>It by default trusts the messages and metadata stored in backends (result stores).</p>
      <p>When reading task metadata from the backend, the data is deserialized.</p>
      <p>Given that an attacker can gain access to, or somehow manipulate the metadata within a celery backend, they could trigger a stored command injection vulnerability and potentially gain further access to the system.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-23727</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-858</url>
      <url>https://osv.dev/vulnerability/GHSA-q4xr-rc97-m4xx</url>
    </references>
    <dates>
      <discovery>2021-12-09</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="8aa6340d-e7c6-41e0-b2a3-3c9e9930312a">
    <topic>py-redis -- can send response data to the client of an unrelated request</topic>
    <affects>
      <package>
    <name>py37-redis2</name>
    <name>py38-redis2</name>
    <name>py39-redis2</name>
    <name>py310-redis2</name>
    <name>py311-redis2</name>
    <range><ge>4.4.0</ge><lt>4.4.4</lt></range>
    <range><ge>4.5.0</ge><lt>4.5.4</lt></range>
      </package>
      <package>
    <name>py37-redis3</name>
    <name>py38-redis3</name>
    <name>py39-redis3</name>
    <name>py310-redis3</name>
    <name>py311-redis3</name>
    <range><ge>4.4.0</ge><lt>4.4.4</lt></range>
    <range><ge>4.5.0</ge><lt>4.5.4</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>drago-balto reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-8fww-64cx-x8p5">
      <p>redis-py through 4.5.3 and 4.4.3 leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a non-pipeline operation), and can send response data to the client of an unrelated request.</p>
      <p>NOTE: this issue exists because of an incomplete fix for CVE-2023-28858.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-28859</cvename>
      <url>https://osv.dev/vulnerability/GHSA-8fww-64cx-x8p5</url>
    </references>
    <dates>
      <discovery>2023-03-26</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="3f6d6181-79b2-4d33-bb1e-5d3f9df0c1d1">
    <topic>py-redis -- can send response data to the client of an unrelated request</topic>
    <affects>
      <package>
    <name>py37-redis2</name>
    <name>py38-redis2</name>
    <name>py39-redis2</name>
    <name>py310-redis2</name>
    <name>py311-redis2</name>
    <range><lt>4.3.6</lt></range>
    <range><ge>4.4.0</ge><lt>4.4.3</lt></range>
    <range><ge>4.5.0</ge><lt>4.5.3</lt></range>
      </package>
      <package>
    <name>py37-redis3</name>
    <name>py38-redis3</name>
    <name>py39-redis3</name>
    <name>py310-redis3</name>
    <name>py311-redis3</name>
    <range><lt>4.3.6</lt></range>
    <range><ge>4.4.0</ge><lt>4.4.3</lt></range>
    <range><ge>4.5.0</ge><lt>4.5.3</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>drago-balto reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-24wv-mv5m-xv4h">
      <p>redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner.</p>
      <p>The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but [are believed to be incomplete](https://github.com/redis/redis-py/issues/2665).</p>
      <p>CVE-2023-28859 has been assigned the issues caused by the incomplete fixes.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-28858</cvename>
      <url>https://osv.dev/vulnerability/GHSA-24wv-mv5m-xv4h</url>
    </references>
    <dates>
      <discovery>2023-03-26</discovery>
      <entry>2023-04-09</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="d2293e22-4390-42c2-a323-34cca2066000">
    <cancelled superseded="e4181981-ccf1-11ed-956f-7054d21a9e2a"/>
  </vuln>

  <vuln vid="8ccff771-ceca-43a0-85ad-3e595e73b425">
    <cancelled superseded="e4181981-ccf1-11ed-956f-7054d21a9e2a"/>
  </vuln>

  <vuln vid="e4181981-ccf1-11ed-956f-7054d21a9e2a">
    <topic>py-sqlalchemy -- multiple SQL Injection vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-sqlalchemy10</name>
    <name>py38-sqlalchemy10</name>
    <name>py39-sqlalchemy10</name>
    <name>py310-sqlalchemy10</name>
    <name>py311-sqlalchemy10</name>
    <range><lt>1.3.0</lt></range>
      </package>
      <package>
    <name>py37-sqlalchemy11</name>
    <name>py38-sqlalchemy11</name>
    <name>py39-sqlalchemy11</name>
    <name>py310-sqlalchemy11</name>
    <name>py311-sqlalchemy11</name>
    <range><lt>1.3.0</lt></range>
      </package>
      <package>
    <name>py37-sqlalchemy12</name>
    <name>py38-sqlalchemy12</name>
    <name>py39-sqlalchemy12</name>
    <name>py310-sqlalchemy12</name>
    <name>py311-sqlalchemy12</name>
    <range><lt>1.3.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>21k reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-123">
      <p>SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.</p>
    </blockquote>
    <p>nosecurity reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-124">
      <p>SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2019-7164</cvename>
      <cvename>CVE-2019-7548</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-123</url>
      <url>https://osv.dev/vulnerability/PYSEC-2019-124</url>
      <url>https://osv.dev/vulnerability/GHSA-887w-45rq-vxgf</url>
      <url>https://osv.dev/vulnerability/GHSA-38fc-9xqv-7f7q</url>
    </references>
    <dates>
      <discovery>2019-02-06</discovery>
      <entry>2023-03-28</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="c13a8c17-cbeb-11ed-956f-7054d21a9e2a">
    <topic>py-lmdb -- multiple vulnerabilities</topic>
    <affects>
      <package>
    <name>py37-lmdb</name>
    <name>py38-lmdb</name>
    <name>py39-lmdb</name>
    <name>py310-lmdb</name>
    <name>py311-lmdb</name>
    <range><lt>0.98</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>TeamSeri0us reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-236">
      <p>An issue was discovered in py-lmdb 0.97. For certain values of md_flags, mdb_node_add does not properly set up a memcpy destination, leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-237">
      <p>An issue was discovered in py-lmdb 0.97. For certain values of mp_flags, mdb_page_touch does not properly set up mc->mc_pg[mc->top], leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-238">
      <p>An issue was discovered in py-lmdb 0.97. mdb_node_del does not validate a memmove in the case of an unexpected node->mn_hi, leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-239">
      <p>An issue was discovered in py-lmdb 0.97. For certain values of mn_flags, mdb_cursor_set triggers a memcpy with an invalid write operation within mdb_xcursor_init1. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker.</p>
    </blockquote>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2019-240">
      <p>An issue was discovered in py-lmdb 0.97. There is a divide-by-zero error in the function mdb_env_open2 if mdb_env_read_header obtains a zero value for a certain size field. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2019-16224</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-236</url>
      <cvename>CVE-2019-16225</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-237</url>
      <cvename>CVE-2019-16226</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-238</url>
      <cvename>CVE-2019-16227</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-239</url>
      <cvename>CVE-2019-16228</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2019-240</url>
    </references>
    <dates>
      <discovery>2019-09-11</discovery>
      <entry>2023-03-26</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="2991178f-cbe8-11ed-956f-7054d21a9e2a">
    <topic>py-Elixir -- weak use of cryptography</topic>
    <affects>
      <package>
    <name>py37-Elixir</name>
    <name>py38-Elixir</name>
    <name>py39-Elixir</name>
    <name>py310-Elixir</name>
    <name>py311-Elixir</name>
    <range><le>0.8.0</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>Red Hat Security Response Team reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2012-13">
      <p>Elixir 0.8.0 uses Blowfish in CFB mode without constructing a unique initialization vector (IV), which makes it easier for context-dependent users to obtain sensitive information and decrypt the database.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2012-2146</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2012-13</url>
    </references>
    <dates>
      <discovery>2012-08-26</discovery>
      <entry>2023-03-26</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>

  <vuln vid="70d0d2ec-cb62-11ed-956f-7054d21a9e2a">
    <topic>py-rencode -- infinite loop that could lead to Denial of Service</topic>
    <affects>
      <package>
    <name>py37-rencode</name>
    <name>py38-rencode</name>
    <name>py39-rencode</name>
    <name>py310-rencode</name>
    <name>py311-rencode</name>
    <range><le>1.0.6_1</le></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>NIST reports:</p>
    <blockquote cite="https://nvd.nist.gov/vuln/detail/CVE-2021-40839">
      <p>The rencode package through 1.0.6 for Python allows an infinite loop in typecode decoding (such as via ;\x2f\x7f), enabling a remote attack that consumes CPU and memory.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2021-40839</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2021-345</url>
      <url>https://osv.dev/vulnerability/GHSA-gh8j-2pgf-x458</url>
    </references>
    <dates>
      <discovery>2021-09-09</discovery>
      <entry>2023-03-25</entry>
      <modified>2023-04-12</modified>
    </dates>
  </vuln>
