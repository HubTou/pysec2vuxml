Fetching packages known vulnerabilities from the Python Package Index...

-------------------------------------------------------------------------------------------------------------
Vulns Package           Port path                 Port name              Port version Maintainer             
-------------------------------------------------------------------------------------------------------------
2     rencode           converters/py-rencode     py39-rencode           1.0.6_1      python@FreeBSD.org     
1     Elixir            databases/py-Elixir       py39-Elixir            0.7.1_3      nivit@FreeBSD.org      
5     lmdb              databases/py-lmdb         py39-lmdb              0.97         k@stereochro.me        
2     redis             databases/py-redis2       py39-redis2            2.10.6_2     sunpoet@FreeBSD.org    
2     redis             databases/py-redis3       py39-redis3            3.5.3        sunpoet@FreeBSD.org    
4     sqlalchemy        databases/py-sqlalchemy10 py39-sqlalchemy10      1.0.14       m.tsatsenko@gmail.com  
4     sqlalchemy        databases/py-sqlalchemy11 py39-sqlalchemy11      1.1.18       sunpoet@FreeBSD.org    
2     sqlalchemy        databases/py-sqlalchemy12 py39-sqlalchemy12      1.2.19       sunpoet@FreeBSD.org    
2     celery            devel/py-celery           py39-celery            4.4.7        olgeni@FreeBSD.org     
1     configobj         devel/py-configobj        py39-configobj         5.0.8        nivit@FreeBSD.org      
2     joblib            devel/py-joblib           py39-joblib            1.1.0        skreuzer@FreeBSD.org   
2     py                devel/py-py               py39-py                1.11.0       python@FreeBSD.org     
1     sentry-sdk        devel/py-sentry-sdk       py39-sentry-sdk        1.5.12       0mp@FreeBSD.org        
1     setuptools        devel/py-setuptools       py311-setuptools       63.1.0       python@FreeBSD.org     
1     setuptools        devel/py-setuptools44     py27-setuptools44      44.1.1       python@FreeBSD.org     
1     setuptools        devel/py-setuptools58     py38-setuptools58      58.5.3_2     python@FreeBSD.org     
1     pycares           dns/py-pycares            py39-pycares           4.1.2        demon@FreeBSD.org      
1     unicorn           emulators/py-unicorn      py39-unicorn           1.0.2        antoine@FreeBSD.org    
1     OWSLib            graphics/py-OWSLib        py39-OWSLib            0.28.0       lbartoletti@FreeBSD.org
3     cinder            misc/py-cinder            py39-cinder            12.0.10_22   sunpoet@FreeBSD.org    
2     tflite            misc/py-tflite            py39-tflite            2.3.0        yuri@FreeBSD.org       
2     impacket          net/py-impacket           py39-impacket          0.9.17_1     contato@kanazuchi.com  
1     suds              net/py-suds               py39-suds              1.1.2        sunpoet@FreeBSD.org    
1     slixmpp           net-im/py-slixmpp         py39-slixmpp           1.7.1        0mp@FreeBSD.org        
1     nicotine-plus     net-p2p/py-nicotine-plus  py39-nicotine-plus     3.2.0_1      ports@FreeBSD.org      
1     pymatgen          science/py-pymatgen       py39-pymatgen          2022.7.19    yuri@FreeBSD.org       
47    tensorflow        science/py-tensorflow     py39-tensorflow        2.9.1_6      amzo1337@gmail.com     
2     cryptography      security/py-cryptography  py39-cryptography      3.4.8_1,1    sunpoet@FreeBSD.org    
1     kerberos          security/py-kerberos      py39-kerberos          1.3.1        dvl@FreeBSD.org        
6     pysaml2           security/py-pysaml24      py39-pysaml24          4.9.0_1      sunpoet@FreeBSD.org    
3     ansible           sysutils/ansible          py39-ansible           7.1.0        0mp@FreeBSD.org        
2     psutil            sysutils/py-psutil121     py39-psutil121         1.2.1_2      bofh@FreeBSD.org       
2     dparse            textproc/py-dparse        py39-dparse            0.5.1        kai@FreeBSD.org        
4     markdown2         textproc/py-markdown2     py39-markdown2         2.3.6        wen@FreeBSD.org        
4     pygments          textproc/py-pygments-25   py39-pygments-25       2.5.2        nivit@FreeBSD.org      
1     beaker            www/py-beaker             py39-beaker            1.12.1       python@FreeBSD.org     
1     django-photologue www/py-django-photologue  py39-django-photologue 3.15_1       ports@caomhin.org      
2     flask-caching     www/py-flask-caching      py39-flask-caching     1.9.0        rt@scientifics.de      
2     Flask-Cors        www/py-flask-cors         py39-Flask-Cors        3.0.8        stiginge@pvv.org       
1     flask-security    www/py-flask-security     py39-flask-security    3.0.0_1      meka@tilda.center      
4     httpie            www/py-httpie             py39-httpie            3.0.2        ale@FreeBSD.org        
2     httpx             www/py-httpx013           py39-httpx013          0.13.3_3     sunpoet@FreeBSD.org    
6     Scrapy            www/py-scrapy             py39-Scrapy            2.5.1        skreuzer@FreeBSD.org   
1     treq              www/py-treq               py39-treq              20.9.0       contact@evilham.com    
2     wagtail           www/py-wagtail            py39-wagtail           4.2_2        sunpoet@FreeBSD.org    
1     WsgiDAV           www/py-wsgidav            py39-WsgiDAV           3.1.0        ultima@FreeBSD.org     
=============================================================================================================
Python packages's FreeBSD ports = 4144
  vulnerable ports              = 41
  vulnerable ports/version      = 46
    vulnerabilities             = 141
-------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Python package 'rencode 1.0.6' / FreeBSD port 'py39-rencode 1.0.6_1' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'converters/py-rencode'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-rencode-1.0.6_1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-345
  Aliases:   ['CVE-2021-40839', 'GHSA-gh8j-2pgf-x458']
  Details:   The rencode package through 1.0.6 for Python allows an infinite loop in typecode decoding (such as via ;\x2f\x7f), enabling a remote attack that consumes CPU and memory. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2021-345
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-gh8j-2pgf-x458
  Aliases:   ['CVE-2021-40839']
  Details:   The rencode package through 1.0.6 for Python allows an infinite loop in typecode decoding (such as via ;\x2f\x7f), enabling a remote attack that consumes CPU and memory. +++
  Link:      https://osv.dev/vulnerability/GHSA-gh8j-2pgf-x458
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'Elixir 0.7.1' / FreeBSD port 'py39-Elixir 0.7.1_3' is vulnerable:
  Please report to  maintainer 'nivit@FreeBSD.org' for port 'databases/py-Elixir'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-Elixir-0.7.1_3 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2012-13
  Aliases:   ['CVE-2012-2146']
  Details:   Elixir 0.8.0 uses Blowfish in CFB mode without constructing a unique initialization vector (IV), which makes it easier for context-dependent users to obtain sensitive information and decrypt the database. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2012-13
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'lmdb 0.97' / FreeBSD port 'py39-lmdb 0.97' is vulnerable:
  Please report to  maintainer 'k@stereochro.me' for port 'databases/py-lmdb'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-lmdb-0.97 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2019-238
  Aliases:   ['CVE-2019-16226']
  Details:   An issue was discovered in py-lmdb 0.97. mdb_node_del does not validate a memmove in the case of an unexpected node->mn_hi, leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker. +++
  Fixed in:  ['0.98']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-238
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-239
  Aliases:   ['CVE-2019-16227']
  Details:   An issue was discovered in py-lmdb 0.97. For certain values of mn_flags, mdb_cursor_set triggers a memcpy with an invalid write operation within mdb_xcursor_init1. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker. +++
  Fixed in:  ['0.98']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-239
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-237
  Aliases:   ['CVE-2019-16225']
  Details:   An issue was discovered in py-lmdb 0.97. For certain values of mp_flags, mdb_page_touch does not properly set up mc->mc_pg[mc->top], leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker. +++
  Fixed in:  ['0.98']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-237
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-240
  Aliases:   ['CVE-2019-16228']
  Details:   An issue was discovered in py-lmdb 0.97. There is a divide-by-zero error in the function mdb_env_open2 if mdb_env_read_header obtains a zero value for a certain size field. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker. +++
  Fixed in:  ['0.98']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-240
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-236
  Aliases:   ['CVE-2019-16224']
  Details:   An issue was discovered in py-lmdb 0.97. For certain values of md_flags, mdb_node_add does not properly set up a memcpy destination, leading to an invalid write operation. NOTE: this outcome occurs when accessing a data.mdb file supplied by an attacker. +++
  Fixed in:  ['0.98']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-236
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'redis 2.10.6' / FreeBSD port 'py39-redis2 2.10.6_2' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'databases/py-redis2'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-redis-4.5.4 (=W) (=C)
  py39-redis2-2.10.6_2 (=W) (=C)
  py39-redis3-3.5.3 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-24wv-mv5m-xv4h
  Aliases:   ['CVE-2023-28858']
  Details:   redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner. The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but [are believed to be incomplete](https://github.com/redis/redis-py/issues/2665). CVE-2023-28859 has been assigned the issues caused by the incomplete fixes. +++
  Fixed in:  ['4.3.6', '4.4.3', '4.5.3']
  Link:      https://osv.dev/vulnerability/GHSA-24wv-mv5m-xv4h
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-8fww-64cx-x8p5
  Aliases:   ['CVE-2023-28859']
  Details:   redis-py through 4.5.3 and 4.4.3 leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a non-pipeline operation), and can send response data to the client of an unrelated request. NOTE: this issue exists because of an incomplete fix for CVE-2023-28858. +++
  Fixed in:  ['4.5.4', '4.4.4']
  Link:      https://osv.dev/vulnerability/GHSA-8fww-64cx-x8p5
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'redis 3.5.3' / FreeBSD port 'py39-redis3 3.5.3' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'databases/py-redis3'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-redis-4.5.4 (=W) (=C)
  py39-redis2-2.10.6_2 (=W) (=C)
  py39-redis3-3.5.3 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-24wv-mv5m-xv4h
  Aliases:   ['CVE-2023-28858']
  Details:   redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner. The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but [are believed to be incomplete](https://github.com/redis/redis-py/issues/2665). CVE-2023-28859 has been assigned the issues caused by the incomplete fixes. +++
  Fixed in:  ['4.3.6', '4.4.3', '4.5.3']
  Link:      https://osv.dev/vulnerability/GHSA-24wv-mv5m-xv4h
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-8fww-64cx-x8p5
  Aliases:   ['CVE-2023-28859']
  Details:   redis-py through 4.5.3 and 4.4.3 leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a non-pipeline operation), and can send response data to the client of an unrelated request. NOTE: this issue exists because of an incomplete fix for CVE-2023-28858. +++
  Fixed in:  ['4.5.4', '4.4.4']
  Link:      https://osv.dev/vulnerability/GHSA-8fww-64cx-x8p5
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'sqlalchemy 1.0.14' / FreeBSD port 'py39-sqlalchemy10 1.0.14' is vulnerable:
  Please report to  maintainer 'm.tsatsenko@gmail.com' for port 'databases/py-sqlalchemy10'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-sqlalchemy10-1.0.14 (=W) (=C)
  py39-sqlalchemy11-1.1.18 (=W)
  py39-sqlalchemy12-1.2.19 (=W)
  py39-sqlalchemy13-1.3.24 (=W)
  py39-sqlalchemy14-1.4.47 (=W)
  py39-sqlalchemy20-2.0.9 (=W)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2019-124
  Aliases:   ['CVE-2019-7548', 'GHSA-38fc-9xqv-7f7q']
  Details:   SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.
  Fixed in:  ['1.2.18']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-124
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-123
  Aliases:   ['CVE-2019-7164', 'GHSA-887w-45rq-vxgf']
  Details:   SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.
  Fixed in:  ['1.2.18']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-123
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-38fc-9xqv-7f7q
  Aliases:   ['CVE-2019-7548']
  Details:   SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-38fc-9xqv-7f7q
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-887w-45rq-vxgf
  Aliases:   ['CVE-2019-7164']
  Details:   SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-887w-45rq-vxgf
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'sqlalchemy 1.1.18' / FreeBSD port 'py39-sqlalchemy11 1.1.18' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'databases/py-sqlalchemy11'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-sqlalchemy10-1.0.14 (=W)
  py39-sqlalchemy11-1.1.18 (=W) (=C)
  py39-sqlalchemy12-1.2.19 (=W)
  py39-sqlalchemy13-1.3.24 (=W)
  py39-sqlalchemy14-1.4.47 (=W)
  py39-sqlalchemy20-2.0.9 (=W)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2019-124
  Aliases:   ['CVE-2019-7548', 'GHSA-38fc-9xqv-7f7q']
  Details:   SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.
  Fixed in:  ['1.2.18']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-124
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2019-123
  Aliases:   ['CVE-2019-7164', 'GHSA-887w-45rq-vxgf']
  Details:   SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.
  Fixed in:  ['1.2.18']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-123
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-38fc-9xqv-7f7q
  Aliases:   ['CVE-2019-7548']
  Details:   SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-38fc-9xqv-7f7q
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-887w-45rq-vxgf
  Aliases:   ['CVE-2019-7164']
  Details:   SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-887w-45rq-vxgf
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'sqlalchemy 1.2.19' / FreeBSD port 'py39-sqlalchemy12 1.2.19' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'databases/py-sqlalchemy12'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-sqlalchemy10-1.0.14 (=W)
  py39-sqlalchemy11-1.1.18 (=W)
  py39-sqlalchemy12-1.2.19 (=W) (=C)
  py39-sqlalchemy13-1.3.24 (=W)
  py39-sqlalchemy14-1.4.47 (=W)
  py39-sqlalchemy20-2.0.9 (=W)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-38fc-9xqv-7f7q
  Aliases:   ['CVE-2019-7548']
  Details:   SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-38fc-9xqv-7f7q
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-887w-45rq-vxgf
  Aliases:   ['CVE-2019-7164']
  Details:   SQLAlchemy through 1.2.17 and 1.3.x through 1.3.0b2 allows SQL Injection via the order_by parameter.
  Fixed in:  ['1.3.0']
  Link:      https://osv.dev/vulnerability/GHSA-887w-45rq-vxgf
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'celery 4.4.7' / FreeBSD port 'py39-celery 4.4.7' is vulnerable:
  Please report to  maintainer 'olgeni@FreeBSD.org' for port 'devel/py-celery'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-celery-4.4.7 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-858
  Aliases:   ['CVE-2021-23727', 'SNYK-PYTHON-CELERY-2314953', 'GHSA-q4xr-rc97-m4xx']
  Details:   This affects the package celery before 5.2.2. It by default trusts the messages and metadata stored in backends (result stores). When reading task metadata from the backend, the data is deserialized. Given that an attacker can gain access to, or somehow manipulate the metadata within a celery backend, they could trigger a stored command injection vulnerability and potentially gain further access to the system. +++
  Fixed in:  ['5.2.2']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-858
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-q4xr-rc97-m4xx
  Aliases:   ['CVE-2021-23727']
  Details:   This affects the package celery before 5.2.2. It by default trusts the messages and metadata stored in backends (result stores). When reading task metadata from the backend, the data is deserialized. Given that an attacker can gain access to, or somehow manipulate the metadata within a celery backend, they could trigger a stored command injection vulnerability and potentially gain further access to the system. +++
  Fixed in:  ['5.2.2']
  Link:      https://osv.dev/vulnerability/GHSA-q4xr-rc97-m4xx
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'configobj 5.0.8' / FreeBSD port 'py39-configobj 5.0.8' is vulnerable:
  Please report to  maintainer 'nivit@FreeBSD.org' for port 'devel/py-configobj'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-configobj-5.0.8 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-c33w-24p9-8m24
  Aliases:   ['CVE-2023-26112']
  Details:   All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\((.*)\). **Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file. +++
  Link:      https://osv.dev/vulnerability/GHSA-c33w-24p9-8m24
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'joblib 1.1.0' / FreeBSD port 'py39-joblib 1.1.0' is vulnerable:
  Please report to  maintainer 'skreuzer@FreeBSD.org' for port 'devel/py-joblib'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-joblib-1.1.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-6hrg-qmvc-2xh8
  Aliases:   ['CVE-2022-21797']
  Details:   The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the `pre_dispatch` flag in `Parallel()` class due to the `eval()` statement. +++
  Fixed in:  ['1.2.0']
  Link:      https://osv.dev/vulnerability/GHSA-6hrg-qmvc-2xh8
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2022-288
  Aliases:   ['CVE-2022-21797']
  Details:   The package joblib from 0 and before 1.2.0 are vulnerable to Arbitrary Code Execution via the pre_dispatch flag in Parallel() class due to the eval() statement. +++
  Fixed in:  ['1.2.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-288
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'py 1.11.0' / FreeBSD port 'py39-py 1.11.0' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'devel/py-py'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-py-1.11.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-w596-4wvx-j9j6
  Aliases:   ['CVE-2022-42969']
  Details:   The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled. +++
  Link:      https://osv.dev/vulnerability/GHSA-w596-4wvx-j9j6
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2022-42969
  Aliases:   ['CVE-2022-42969', 'GHSA-w596-4wvx-j9j6']
  Details:   The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2022-42969
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'pyinstaller 3.5' / FreeBSD port 'py39-pyinstaller 3.5_1' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'devel/py-pyinstaller'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-pyinstaller-3.5_1 (=W) (=C)
--------------------------------------------------------------------------------

=> Package ignored (this vulnerability doesn't apply to FreeBSD)

=> Package ignored (this vulnerability doesn't apply to FreeBSD)

--------------------------------------------------------------------------------
Python package 'sentry-sdk 1.5.12' / FreeBSD port 'py39-sentry-sdk 1.5.12' is vulnerable:
  Please report to  maintainer '0mp@FreeBSD.org' for port 'devel/py-sentry-sdk'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-sentry-sdk-1.5.12 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-29pr-6jr8-q5jm
  Aliases:   ['CVE-2023-28117']
  Details:   ### Impact

When using the [Django integration](https://docs.sentry.io/platforms/python/guides/django/) of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry. These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application. +++
  Fixed in:  ['1.14.0']
  Link:      https://osv.dev/vulnerability/GHSA-29pr-6jr8-q5jm
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'setuptools 63.1.0' / FreeBSD port 'py311-setuptools 63.1.0' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'devel/py-setuptools'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py311-setuptools-63.1.0 (=W) (=C)
  py310-setuptools-63.1.0 (=W) (=C)
  py39-setuptools-63.1.0 (=W) (=C)
  py38-setuptools-63.1.0 (=W) (=C)
  py37-setuptools-63.1.0 (=W) (=C)
  py27-setuptools44-44.1.1 (=W) (=C)
  py38-setuptools58-58.5.3_2 (=W) (=C)
  py37-setuptools58-58.5.3_2 (=W) (=C)
  py311-setuptools58-58.5.3_2 (=W) (=C)
  py310-setuptools58-58.5.3_2 (=W) (=C)
  py39-setuptools58-58.5.3_2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-r9hx-vwmv-q579
  Aliases:   ['CVE-2022-40897']
  Details:   Python Packaging Authority (PyPA)'s setuptools is a library designed to facilitate packaging Python projects. Setuptools version 65.5.0 and earlier could allow remote attackers to cause a denial of service by fetching malicious HTML from a PyPI package or custom PackageIndex page due to a vulnerable Regular Expression in `package_index`. This has been patched in version 65.5.1. +++
  Fixed in:  ['65.5.1']
  Link:      https://osv.dev/vulnerability/GHSA-r9hx-vwmv-q579
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'setuptools 44.1.1' / FreeBSD port 'py27-setuptools44 44.1.1' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'devel/py-setuptools44'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py311-setuptools-63.1.0 (=W) (=C)
  py310-setuptools-63.1.0 (=W) (=C)
  py39-setuptools-63.1.0 (=W) (=C)
  py38-setuptools-63.1.0 (=W) (=C)
  py37-setuptools-63.1.0 (=W) (=C)
  py27-setuptools44-44.1.1 (=W) (=C)
  py38-setuptools58-58.5.3_2 (=W) (=C)
  py37-setuptools58-58.5.3_2 (=W) (=C)
  py311-setuptools58-58.5.3_2 (=W) (=C)
  py310-setuptools58-58.5.3_2 (=W) (=C)
  py39-setuptools58-58.5.3_2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-r9hx-vwmv-q579
  Aliases:   ['CVE-2022-40897']
  Details:   Python Packaging Authority (PyPA)'s setuptools is a library designed to facilitate packaging Python projects. Setuptools version 65.5.0 and earlier could allow remote attackers to cause a denial of service by fetching malicious HTML from a PyPI package or custom PackageIndex page due to a vulnerable Regular Expression in `package_index`. This has been patched in version 65.5.1. +++
  Fixed in:  ['65.5.1']
  Link:      https://osv.dev/vulnerability/GHSA-r9hx-vwmv-q579
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'setuptools 58.5.3' / FreeBSD port 'py38-setuptools58 58.5.3_2' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'devel/py-setuptools58'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py311-setuptools-63.1.0 (=W) (=C)
  py310-setuptools-63.1.0 (=W) (=C)
  py39-setuptools-63.1.0 (=W) (=C)
  py38-setuptools-63.1.0 (=W) (=C)
  py37-setuptools-63.1.0 (=W) (=C)
  py27-setuptools44-44.1.1 (=W) (=C)
  py38-setuptools58-58.5.3_2 (=W) (=C)
  py37-setuptools58-58.5.3_2 (=W) (=C)
  py311-setuptools58-58.5.3_2 (=W) (=C)
  py310-setuptools58-58.5.3_2 (=W) (=C)
  py39-setuptools58-58.5.3_2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-r9hx-vwmv-q579
  Aliases:   ['CVE-2022-40897']
  Details:   Python Packaging Authority (PyPA)'s setuptools is a library designed to facilitate packaging Python projects. Setuptools version 65.5.0 and earlier could allow remote attackers to cause a denial of service by fetching malicious HTML from a PyPI package or custom PackageIndex page due to a vulnerable Regular Expression in `package_index`. This has been patched in version 65.5.1. +++
  Fixed in:  ['65.5.1']
  Link:      https://osv.dev/vulnerability/GHSA-r9hx-vwmv-q579
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'pycares 4.1.2' / FreeBSD port 'py39-pycares 4.1.2' is vulnerable:
  Please report to  maintainer 'demon@FreeBSD.org' for port 'dns/py-pycares'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-pycares-4.1.2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-c58j-88f5-h53f
  Details:   ### Impact

pycares versions < 4.2.0 are affected by [CVE-2021-3672](https://nvd.nist.gov/vuln/detail/CVE-2021-3672).

### Patches +++
  Fixed in:  ['4.2.0']
  Link:      https://osv.dev/vulnerability/GHSA-c58j-88f5-h53f
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'unicorn 1.0.2' / FreeBSD port 'py39-unicorn 1.0.2' is vulnerable:
  Please report to  maintainer 'antoine@FreeBSD.org' for port 'emulators/py-unicorn'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-unicorn-1.0.2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-868
  Aliases:   ['CVE-2021-44078']
  Details:   An issue was discovered in split_region in uc.c in Unicorn Engine before 2.0.0-rc5. It allows local attackers to escape the sandbox. An attacker must first obtain the ability to execute crafted code in the target sandbox in order to exploit this vulnerability. The specific flaw exists within the virtual memory manager. The issue results from the faulty comparison of GVA and GPA while calling uc_mem_map_ptr to free part of a claimed memory block. An attacker can leverage this vulnerability to escape the sandbox and execute arbitrary code on the host machine. +++
  Fixed in:  ['2.0.0rc1']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-868
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'OWSLib 0.28.0' / FreeBSD port 'py39-OWSLib 0.28.0' is vulnerable:
  Please report to  maintainer 'lbartoletti@FreeBSD.org' for port 'graphics/py-OWSLib'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-OWSLib-0.28.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-8h9c-r582-mggc
  Aliases:   ['CVE-2023-27476']
  Details:   ### Impact

OWSLib's XML parser (which supports both `lxml` and `xml.etree`) does not disable entity resolution for `lxml`, and could lead to arbitrary file reads from an attacker-controlled XML payload. This affects all XML parsing in the codebase. +++
  Fixed in:  ['0.28.1']
  Link:      https://osv.dev/vulnerability/GHSA-8h9c-r582-mggc
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'cinder 12.0.10' / FreeBSD port 'py39-cinder 12.0.10_22' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'misc/py-cinder'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-cinder-12.0.10_22 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2020-228
  Aliases:   ['CVE-2020-10755']
  Details:   An insecure-credentials flaw was found in all openstack-cinder versions before openstack-cinder 14.1.0, all openstack-cinder 15.x.x versions before openstack-cinder 15.2.0 and all openstack-cinder 16.x.x versions before openstack-cinder 16.1.0. When using openstack-cinder with the Dell EMC ScaleIO or VxFlex OS backend storage driver, credentials for the entire backend are exposed in the ``connection_info`` element in all Block Storage v3 Attachments API calls containing that element. This flaw enables an end-user to create a volume, make an API call to show the attachment detail information, and retrieve a username and password that may be used to connect to another user's volume. Additionally, these credentials are valid for the ScaleIO or VxFlex OS Management API, should an attacker discover the Management API endpoint. Source: OpenStack project +++
  Fixed in:  ['14.1.0', '15.2.0', '16.1.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2020-228
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-qhch-g8qr-p497
  Aliases:   ['CVE-2014-3641']
  Details:   The (1) GlusterFS and (2) Linux Smbfs drivers in OpenStack Cinder before 2014.1.3 allows remote authenticated users to obtain file data from the Cinder-volume host by cloning and attaching a volume with a crafted qcow2 header. +++
  Fixed in:  ['2014.1.3']
  Link:      https://osv.dev/vulnerability/GHSA-qhch-g8qr-p497
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-7h75-hwxx-qpgc
  Aliases:   ['CVE-2022-47951']
  Details:   An issue was discovered in OpenStack Cinder before 19.1.2, 20.x before 20.0.2, and 21.0.0; Glance before 23.0.1, 24.x before 24.1.1, and 25.0.0; and Nova before 24.1.2, 25.x before 25.0.2, and 26.0.0. By supplying a specially created VMDK flat image that references a specific backing file path, an authenticated user may convince systems to return a copy of that file's contents from the server, resulting in unauthorized access to potentially sensitive data. +++
  Fixed in:  ['19.1.2', '20.0.2']
  Link:      https://osv.dev/vulnerability/GHSA-7h75-hwxx-qpgc
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'tflite 2.3.0' / FreeBSD port 'py39-tflite 2.3.0' is vulnerable:
  Please report to  maintainer 'yuri@FreeBSD.org' for port 'misc/py-tflite'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-tflite-2.3.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-wf5p-c75w-w3wh
  Aliases:   ['CVE-2021-37689']
  Details:   ### Impact
An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service: +++
  Fixed in:  ['2.3.4', '2.4.3', '2.5.1']
  Link:      https://osv.dev/vulnerability/GHSA-wf5p-c75w-w3wh
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-h6q3-vv32-2cq5
  Aliases:   ['CVE-2022-41894']
  Details:   ### Impact
The reference kernel of the [`CONV_3D_TRANSPOSE`](https://github.com/tensorflow/tensorflow/blob/091e63f0ea33def7ecad661a5ac01dcafbafa90b/tensorflow/lite/kernels/internal/reference/conv3d_transpose.h#L121) TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-h6q3-vv32-2cq5
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'impacket 0.9.17' / FreeBSD port 'py39-impacket 0.9.17_1' is vulnerable:
  Please report to  maintainer 'contato@kanazuchi.com' for port 'net/py-impacket'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-impacket-0.9.17_1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-17
  Aliases:   ['CVE-2021-31800', 'GHSA-mj63-64x7-57xf']
  Details:   Multiple path traversal vulnerabilities exist in smbserver.py in Impacket through 0.9.22. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ../ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing /etc/shadow or an SSH authorized key. +++
  Fixed in:  ['0.9.23']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-17
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-mj63-64x7-57xf
  Aliases:   ['CVE-2021-31800']
  Details:   Multiple path traversal vulnerabilities exist in smbserver.py in Impacket before 0.9.23. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ../ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing /etc/shadow or an SSH authorized key. +++
  Fixed in:  ['0.9.23']
  Link:      https://osv.dev/vulnerability/GHSA-mj63-64x7-57xf
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'suds 1.1.2' / FreeBSD port 'py39-suds 1.1.2' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'net/py-suds'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-suds-1.1.2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2013-32
  Aliases:   ['CVE-2013-2217', 'GHSA-vpqp-hx68-p2wx']
  Details:   cache.py in Suds 0.4, when tempdir is set to None, allows local users to redirect SOAP queries and possibly have other unspecified impact via a symlink attack on a cache file with a predictable name in /tmp/suds/. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2013-32
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'slixmpp 1.7.1' / FreeBSD port 'py39-slixmpp 1.7.1' is vulnerable:
  Please report to  maintainer '0mp@FreeBSD.org' for port 'net-im/py-slixmpp'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-slixmpp-1.7.1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-q6cq-m9gm-6q2f
  Aliases:   ['CVE-2022-45197']
  Details:   Slixmpp before 1.8.3 lacks SSL Certificate hostname validation in XMLStream, allowing an attacker to pose as any server in the eyes of Slixmpp. +++
  Fixed in:  ['1.8.3']
  Link:      https://osv.dev/vulnerability/GHSA-q6cq-m9gm-6q2f
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'nicotine-plus 3.2.0' / FreeBSD port 'py39-nicotine-plus 3.2.0_1' is vulnerable:
  Please report to  maintainer 'ports@FreeBSD.org' for port 'net-p2p/py-nicotine-plus'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-nicotine-plus-3.2.0_1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-p4v2-r99v-wjc2
  Aliases:   ['CVE-2021-45848']
  Details:   Denial of service (DoS) vulnerability in Nicotine+ starting with version 3.0.3 and prior to version 3.2.1 allows a user with a modified Soulseek client to crash Nicotine+ by sending a file download request with a file path containing a null character. +++
  Fixed in:  ['3.2.1']
  Link:      https://osv.dev/vulnerability/GHSA-p4v2-r99v-wjc2
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'pymatgen 2022.7.19' / FreeBSD port 'py39-pymatgen 2022.7.19' is vulnerable:
  Please report to  maintainer 'yuri@FreeBSD.org' for port 'science/py-pymatgen'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-pymatgen-2022.7.19 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-5jqp-885w-xj32
  Aliases:   ['CVE-2022-42964']
  Details:   An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the pymatgen PyPI package, when an attacker is able to supply arbitrary input to the GaussianInput.from_string method. +++
  Link:      https://osv.dev/vulnerability/GHSA-5jqp-885w-xj32
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'tensorflow 2.9.1' / FreeBSD port 'py39-tensorflow 2.9.1_6' is vulnerable:
  Please report to  maintainer 'amzo1337@gmail.com' for port 'science/py-tensorflow'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-tensorflow-2.9.1_6 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-mgmh-g2v6-mqw5
  Aliases:   ['CVE-2022-35941']
  Details:   ### Impact
The [`AvgPoolOp`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/avgpooling_op.cc#L56-L98) function takes an argument `ksize` that must be positive but is not checked. A negative `ksize` can trigger a `CHECK` failure and crash the program. +++
  Fixed in:  ['2.7.2', '2.8.1', '2.9.2']
  Link:      https://osv.dev/vulnerability/GHSA-mgmh-g2v6-mqw5
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-cqvq-fvhr-v6hc
  Details:   ### Impact
Another instance of CVE-2022-35935, where `SobolSample` is vulnerable to a denial of service via assumed scalar inputs, was found and fixed. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-cqvq-fvhr-v6hc
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-xf83-q765-xm6m
  Details:   ### Impact
Another instance of CVE-2022-35991, where `TensorListScatter` and `TensorListScatterV2` crash via non scalar inputs in`element_shape`, was found in eager mode and fixed. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-xf83-q765-xm6m
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-66vq-54fq-6jvv
  Aliases:   ['CVE-2022-41891']
  Details:   ### Impact
If [`tf.raw_ops.TensorListConcat`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.h) is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-66vq-54fq-6jvv
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="1f79b9ca-1108-4dec-8966-86a524cf7064">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-66vq-54fq-6jvv">
      <p>### Impact
If [`tf.raw_ops.TensorListConcat`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.h) is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack.
```python
import tensorflow as tf
tf.raw_ops.TensorListConcat(
    input_handle=tf.data.experimental.to_variant(tf.data.Dataset.from_tensor_slices([1, 2, 3])),
    element_dtype=tf.dtypes.float32,
    element_shape=[]
)
```

### Patches
We have patched the issue in GitHub commit [fc33f3dc4c14051a83eec6535b608abe1d355fde](https://github.com/tensorflow/tensorflow/commit/fc33f3dc4c14051a83eec6535b608abe1d355fde).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Tong Liu, ShanghaiTech University
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41891</cvename>
      <url>https://osv.dev/vulnerability/GHSA-66vq-54fq-6jvv</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-67pf-62xr-q35m
  Aliases:   ['CVE-2022-41893']
  Details:   ### Impact
If [`tf.raw_ops.TensorListResize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.cc) is given a nonscalar value for input `size`, it results `CHECK` fail which can be used to trigger a denial of service attack. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-67pf-62xr-q35m
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="a3e06d54-4eea-48f0-b5d6-6dc754c702ce">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-67pf-62xr-q35m">
      <p>### Impact
If [`tf.raw_ops.TensorListResize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.cc) is given a nonscalar value for input `size`, it results `CHECK` fail which can be used to trigger a denial of service attack.
```python
import numpy as np
import tensorflow as tf

a = data_structures.tf_tensor_list_new(elements = tf.constant(value=[3, 4, 5]))
b = np.zeros([0, 2, 3, 3])

tf.raw_ops.TensorListResize(input_handle=a, size=b)
```

### Patches
We have patched the issue in GitHub commit [888e34b49009a4e734c27ab0c43b0b5102682c56](https://github.com/tensorflow/tensorflow/commit/888e34b49009a4e734c27ab0c43b0b5102682c56).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattankul
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41893</cvename>
      <url>https://osv.dev/vulnerability/GHSA-67pf-62xr-q35m</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-8fvv-46hw-vpg3
  Aliases:   ['CVE-2022-41887']
  Details:   ### Impact
[`tf.keras.losses.poisson`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/losses.py) receives a `y_pred` and `y_true` that are passed through `functor::mul` in [`BinaryOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h). If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment. +++
  Fixed in:  ['2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-8fvv-46hw-vpg3
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="58e81172-05ec-4ea3-91d3-ca876a95a292">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-8fvv-46hw-vpg3">
      <p>### Impact
[`tf.keras.losses.poisson`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/losses.py) receives a `y_pred` and `y_true` that are passed through `functor::mul` in [`BinaryOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h). If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment.
```python
import numpy as np
import tensorflow as tf

true_value = tf.reshape(shape=[1, 2500000000], tensor = tf.zeros(dtype=tf.bool, shape=[50000, 50000]))
pred_value = np.array([[[-2]], [[8]]], dtype = np.float64)

tf.keras.losses.poisson(y_true=true_value,y_pred=pred_value)
```

### Patches
We have patched the issue in GitHub commit [c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c](https://github.com/tensorflow/tensorflow/commit/c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1 and 2.9.3, as these are also affected and still in supported range. However, we will not cherrypick this commit into TensorFlow 2.8.x, as it depends on Eigen behavior that changed between 2.8 and 2.9.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattankul.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41887</cvename>
      <url>https://osv.dev/vulnerability/GHSA-8fvv-46hw-vpg3</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-6x99-gv2v-q76v
  Aliases:   ['CVE-2022-41888']
  Details:   ### Impact
When running on GPU, [`tf.image.generate_bounding_box_proposals`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) receives a `scores` input that must be of rank 4 but is not checked. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-6x99-gv2v-q76v
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="f5268bdf-3df1-4a93-a024-17e7f87b6099">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-6x99-gv2v-q76v">
      <p>### Impact
When running on GPU, [`tf.image.generate_bounding_box_proposals`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) receives a `scores` input that must be of rank 4 but is not checked.
```python
import tensorflow as tf

a = tf.constant(value=[[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]])
b = tf.constant(value=[1])

tf.image.generate_bounding_box_proposals(scores=a,bbox_deltas=a,image_info=a,anchors=a,pre_nms_topn=b)
```

### Patches
We have patched the issue in GitHub commit [cf35502463a88ca7185a99daa7031df60b3c1c98](https://github.com/tensorflow/tensorflow/commit/cf35502463a88ca7185a99daa7031df60b3c1c98).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattankul.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41888</cvename>
      <url>https://osv.dev/vulnerability/GHSA-6x99-gv2v-q76v</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-xxcj-rhqg-m46g
  Aliases:   ['CVE-2022-41889']
  Details:   ### Impact
If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a `nullptr`, which is not caught. An example can be seen in [`tf.compat.v1.extract_volume_patches`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) by passing in quantized tensors as input `ksizes`. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-xxcj-rhqg-m46g
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="1767f9e8-537e-4667-8cf9-cdeeb2f8de7f">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-xxcj-rhqg-m46g">
      <p>### Impact
If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a `nullptr`, which is not caught. An example can be seen in [`tf.compat.v1.extract_volume_patches`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) by passing in quantized tensors as input `ksizes`.
```python
import numpy as np
import tensorflow as tf

a_input = np.array([1, -1], dtype= np.int32)
a_ksizes =  a_strides = tf.constant(dtype=tf.dtypes.qint16, value=[[1, 4], [5, 2]])


tf.compat.v1.extract_volume_patches(input=a_input,ksizes=a_ksizes,strides=a_strides,padding='VALID')
```

### Patches
We have patched the issue in GitHub commit [e9e95553e5411834d215e6770c81a83a3d0866ce](https://github.com/tensorflow/tensorflow/commit/e9e95553e5411834d215e6770c81a83a3d0866ce).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattankul.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41889</cvename>
      <url>https://osv.dev/vulnerability/GHSA-xxcj-rhqg-m46g</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-54pp-c6pp-7fpx
  Aliases:   ['CVE-2022-41886']
  Details:   ### Impact
When [`tf.raw_ops.ImageProjectiveTransformV2`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.cc) is given a large output shape, it overflows. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-54pp-c6pp-7fpx
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="ae2894a3-f86b-4009-acc3-1301a7e2ecb6">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-54pp-c6pp-7fpx">
      <p>### Impact
When [`tf.raw_ops.ImageProjectiveTransformV2`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.cc) is given a large output shape, it overflows.
```python
import tensorflow as tf

interpolation = "BILINEAR"
fill_mode = "REFLECT"
images = tf.constant(0.184634328, shape=[2,5,8,3], dtype=tf.float32)
transforms = tf.constant(0.378575385, shape=[2,8], dtype=tf.float32)
output_shape = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)
tf.raw_ops.ImageProjectiveTransformV2(images=images, transforms=transforms, output_shape=output_shape, interpolation=interpolation, fill_mode=fill_mode)
```

### Patches
We have patched the issue in GitHub commit [8faa6ea692985dbe6ce10e1a3168e0bd60a723ba](https://github.com/tensorflow/tensorflow/commit/8faa6ea692985dbe6ce10e1a3168e0bd60a723ba).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41886</cvename>
      <url>https://osv.dev/vulnerability/GHSA-54pp-c6pp-7fpx</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-f2w8-jw48-fr7j
  Aliases:   ['CVE-2022-41897']
  Details:   ### Impact
If [`FractionMaxPoolGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) is given outsize inputs `row_pooling_sequence` and `col_pooling_sequence`, TensorFlow will crash. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-f2w8-jw48-fr7j
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="209fd18f-411a-4824-9cee-08cc60b3a1a3">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-f2w8-jw48-fr7j">
      <p>### Impact
If [`FractionMaxPoolGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) is given outsize inputs `row_pooling_sequence` and `col_pooling_sequence`, TensorFlow will crash.

```python
import tensorflow as tf
tf.raw_ops.FractionMaxPoolGrad(
	orig_input = [[[[1, 1, 1, 1, 1]]]],
    orig_output = [[[[1, 1, 1]]]],
    out_backprop = [[[[3], [3], [6]]]],
    row_pooling_sequence = [-0x4000000, 1, 1], 
    col_pooling_sequence = [-0x4000000, 1, 1], 
    overlapping = False
 )
```

### Patches
We have patched the issue in GitHub commit [d71090c3e5ca325bdf4b02eb236cfb3ee823e927](https://github.com/tensorflow/tensorflow/commit/d71090c3e5ca325bdf4b02eb236cfb3ee823e927).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Vul AI.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41897</cvename>
      <url>https://osv.dev/vulnerability/GHSA-f2w8-jw48-fr7j</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-368v-7v32-52fx
  Aliases:   ['CVE-2022-41907']
  Details:   ### Impact
When [`tf.raw_ops.ResizeNearestNeighborGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/resize_nearest_neighbor_op.cc) is given a large `size` input, it overflows. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-368v-7v32-52fx
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="c022259f-4d44-47aa-85cc-b050a13cc48c">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-368v-7v32-52fx">
      <p>### Impact
When [`tf.raw_ops.ResizeNearestNeighborGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/resize_nearest_neighbor_op.cc) is given a large `size` input, it overflows.
```
import tensorflow as tf

align_corners = True
half_pixel_centers = False
grads = tf.constant(1, shape=[1,8,16,3], dtype=tf.float16)
size = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)
tf.raw_ops.ResizeNearestNeighborGrad(grads=grads, size=size, align_corners=align_corners, half_pixel_centers=half_pixel_centers)
```

### Patches
We have patched the issue in GitHub commit [00c821af032ba9e5f5fa3fe14690c8d28a657624](https://github.com/tensorflow/tensorflow/commit/00c821af032ba9e5f5fa3fe14690c8d28a657624).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41907</cvename>
      <url>https://osv.dev/vulnerability/GHSA-368v-7v32-52fx</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-rmg2-f698-wq35
  Aliases:   ['CVE-2022-41896']
  Details:   ### Impact
If [`ThreadUnsafeUnigramCandidateSampler`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-rmg2-f698-wq35
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="d960952f-bdd2-4824-b725-5eaad5abc4d1">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-rmg2-f698-wq35">
      <p>### Impact
If [`ThreadUnsafeUnigramCandidateSampler`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash.

```python
import tensorflow as tf
tf.raw_ops.Mfcc(
    spectrogram = [[[1.38, 6.32, 5.75, 9.51]]],
    sample_rate = 2,
    upper_frequency_limit = 5.0,
    lower_frequency_limit = 1.0,
    filterbank_channel_count = 2**31 - 1,
    dct_coefficient_count = 1
)
```

### Patches
We have patched the issue in GitHub commit [39ec7eaf1428e90c37787e5b3fbd68ebd3c48860](https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Vul AI.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41896</cvename>
      <url>https://osv.dev/vulnerability/GHSA-rmg2-f698-wq35</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-hq7g-wwwp-q46h
  Aliases:   ['CVE-2022-41898']
  Details:   ### Impact
If [`SparseFillEmptyRowsGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc) is given empty inputs, TensorFlow will crash. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-hq7g-wwwp-q46h
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="8f88f47b-8ad8-4e5c-8059-a96682027222">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-hq7g-wwwp-q46h">
      <p>### Impact
If [`SparseFillEmptyRowsGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc) is given empty inputs, TensorFlow will crash.

```python
import tensorflow as tf
tf.raw_ops.SparseFillEmptyRowsGrad(
    reverse_index_map=[], grad_values=[], name=None
)
```

### Patches
We have patched the issue in GitHub commit [af4a6a3c8b95022c351edae94560acc61253a1b8](https://github.com/tensorflow/tensorflow/commit/af4a6a3c8b95022c351edae94560acc61253a1b8).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Jiawei Liu, PhD student at University of Illinois, Urbana-Champaign.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41898</cvename>
      <url>https://osv.dev/vulnerability/GHSA-hq7g-wwwp-q46h</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-g9fm-r5mm-rf9f
  Aliases:   ['CVE-2022-41901']
  Details:   ### Impact
An input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in [`tf.raw_ops.SparseMatrixNNZ`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse/sparse_matrix.h). +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-g9fm-r5mm-rf9f
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="68356fa0-7992-41d4-93a2-8407c937c439">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-g9fm-r5mm-rf9f">
      <p>### Impact
An input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in [`tf.raw_ops.SparseMatrixNNZ`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse/sparse_matrix.h).

```python
import tensorflow as tf
tf.raw_ops.SparseMatrixNNZ(sparse_matrix=[])
```

### Patches
We have patched the issue in GitHub commit [f856d02e5322821aad155dad9b3acab1e9f5d693](https://github.com/tensorflow/tensorflow/commit/f856d02e5322821aad155dad9b3acab1e9f5d693).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Kang Hong Jin
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41901</cvename>
      <url>https://osv.dev/vulnerability/GHSA-g9fm-r5mm-rf9f</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-cg88-rpvp-cjv5
  Aliases:   ['CVE-2022-41902']
  Details:   ### Impact
The function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-cg88-rpvp-cjv5
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="fef3a162-37e4-4c98-9447-b924b55a1fde">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-cg88-rpvp-cjv5">
      <p>### Impact
The function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.

### Patches
We have patched the issue in GitHub commit [a65411a1d69edfb16b25907ffb8f73556ce36bb7](https://github.com/tensorflow/tensorflow/commit/a65411a1d69edfb16b25907ffb8f73556ce36bb7).

The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41902</cvename>
      <url>https://osv.dev/vulnerability/GHSA-cg88-rpvp-cjv5</url>
    </references>
    <dates>
      <discovery>2022-12-06</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-pf36-r9c6-h97j
  Aliases:   ['CVE-2022-41911']
  Details:   ### Impact
When [printing a tensor](https://github.com/tensorflow/tensorflow/blob/807cae8a807960fd7ac2313cde73a11fc15e7942/tensorflow/core/framework/tensor.cc#L1200-L1227), we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-pf36-r9c6-h97j
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="5c4b9a98-dd8d-4575-aa71-c4d2f2d37185">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-pf36-r9c6-h97j">
      <p>### Impact
When [printing a tensor](https://github.com/tensorflow/tensorflow/blob/807cae8a807960fd7ac2313cde73a11fc15e7942/tensorflow/core/framework/tensor.cc#L1200-L1227), we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.

### Patches
We have patched the issue in GitHub commit [1be743703279782a357adbf9b77dcb994fe8b508](https://github.com/tensorflow/tensorflow/commit/1be743703279782a357adbf9b77dcb994fe8b508).

The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1, TensorFlow 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.

### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability was discovered via internal fuzzing.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41911</cvename>
      <url>https://osv.dev/vulnerability/GHSA-pf36-r9c6-h97j</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-rjx6-v474-2ch9
  Aliases:   ['CVE-2022-41909']
  Details:   ### Impact
An input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in [`tf.raw_ops.CompositeTensorVariantToComponents`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc). +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-rjx6-v474-2ch9
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="af63e362-7f0e-4260-9384-1a13c1b60881">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-rjx6-v474-2ch9">
      <p>### Impact
An input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in [`tf.raw_ops.CompositeTensorVariantToComponents`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).

```python
import tensorflow as tf

encode = tf.raw_ops.EmptyTensorList(element_dtype=tf.int32, element_shape=[10, 15], max_num_elements=2)
meta= ""
component=[tf.int32]

print(tf.raw_ops.CompositeTensorVariantToComponents(encoded=encode,metadata=meta,Tcomponents=component))
```

### Patches
We have patched the issue in GitHub commits [bf594d08d377dc6a3354d9fdb494b32d45f91971](https://github.com/tensorflow/tensorflow/commit/bf594d08d377dc6a3354d9fdb494b32d45f91971) and [660ce5a89eb6766834bdc303d2ab3902aef99d3d](https://github.com/tensorflow/tensorflow/commit/660ce5a89eb6766834bdc303d2ab3902aef99d3d).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by pattarakritr@smu.edu.sg
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41909</cvename>
      <url>https://osv.dev/vulnerability/GHSA-rjx6-v474-2ch9</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-27rc-728f-x5w2
  Aliases:   ['CVE-2022-41899']
  Details:   ### Impact
Inputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in [`SdcaOptimizer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sdca_internal.cc). +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-27rc-728f-x5w2
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="6212cc8b-d311-408f-816b-c74836a35c65">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-27rc-728f-x5w2">
      <p>### Impact
Inputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in [`SdcaOptimizer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sdca_internal.cc).

```python
import tensorflow as tf

tf.raw_ops.SdcaOptimizer(
    sparse_example_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],
    sparse_feature_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],
    sparse_feature_values=8 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],
    dense_features=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],
    example_weights=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),
    example_labels=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),
    sparse_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],
    sparse_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],
    dense_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],
    example_state_data=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),
    loss_type="squared_loss",
    l1=0.0,
    l2=0.0,
    num_loss_partitions=1,
    num_inner_iterations=1,
    adaptative=False,)
```

### Patches
We have patched the issue in GitHub commit [80ff197d03db2a70c6a111f97dcdacad1b0babfa](https://github.com/tensorflow/tensorflow/commit/80ff197d03db2a70c6a111f97dcdacad1b0babfa).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Zizhuang Deng of IIE, UCAS
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41899</cvename>
      <url>https://osv.dev/vulnerability/GHSA-27rc-728f-x5w2</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-frqp-wp83-qggv
  Aliases:   ['CVE-2022-41910']
  Details:   ### Impact
The function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-frqp-wp83-qggv
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="bccb3d78-e38f-49f1-963e-7e095778667b">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-frqp-wp83-qggv">
      <p>### Impact
The function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
```python
import tensorflow as tf
@tf.function
def test():
    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],
    								   input_min=[1.0],
    								   input_max=[10.0],
    								   signed_input=True,
    								   num_bits=1,
    								   range_given=True,
    								   round_mode='HALF_TO_EVEN',
    								   narrow_range=True,
    								   axis=0x7fffffff)
test()
```

### Patches
We have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).

The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41910</cvename>
      <url>https://osv.dev/vulnerability/GHSA-frqp-wp83-qggv</url>
    </references>
    <dates>
      <discovery>2022-12-06</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-gq2j-cr96-gvqx
  Aliases:   ['CVE-2022-41895']
  Details:   ### Impact
If [`MirrorPadGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given outsize input `paddings`, TensorFlow will give a heap OOB error. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-gq2j-cr96-gvqx
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="5d306e97-cc42-42c9-8a7f-397ec0c9b2c8">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-gq2j-cr96-gvqx">
      <p>### Impact
If [`MirrorPadGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given outsize input `paddings`, TensorFlow will give a heap OOB error.

```python
import tensorflow as tf
tf.raw_ops.MirrorPadGrad(input=[1],
             paddings=[[0x77f00000,0xa000000]],
             mode = 'REFLECT')
```

### Patches
We have patched the issue in GitHub commit [717ca98d8c3bba348ff62281fdf38dcb5ea1ec92](https://github.com/tensorflow/tensorflow/commit/717ca98d8c3bba348ff62281fdf38dcb5ea1ec92).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Vul AI.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41895</cvename>
      <url>https://osv.dev/vulnerability/GHSA-gq2j-cr96-gvqx</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-xvwp-h6jv-7472
  Aliases:   ['CVE-2022-41900']
  Details:   ### Impact
An input `pooling_ratio` that is smaller than 1 will trigger a heap OOB in [`tf.raw_ops.FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) and [`tf.raw_ops.FractionalAvgPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_avg_pool_op.cc). +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-xvwp-h6jv-7472
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="e1db41d7-7fb4-42b9-b393-436fac0754cc">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-xvwp-h6jv-7472">
      <p>### Impact
An input `pooling_ratio` that is smaller than 1 will trigger a heap OOB in [`tf.raw_ops.FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) and [`tf.raw_ops.FractionalAvgPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_avg_pool_op.cc).

### Patches
We have patched the issue in GitHub commit [216525144ee7c910296f5b05d214ca1327c9ce48](https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48).

The fix will be included in TensorFlow 2.11.0. We will also cherry pick this commit on TensorFlow 2.10.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41900</cvename>
      <url>https://osv.dev/vulnerability/GHSA-xvwp-h6jv-7472</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-h246-cgh4-7475
  Aliases:   ['CVE-2022-41890']
  Details:   ### Impact
If [`BCast::ToShape`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) is given input larger than an `int32`, it will crash, despite being supposed to handle up to an `int64`. An example can be seen in [`tf.experimental.numpy.outer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) by passing in large input to the input `b`. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-h246-cgh4-7475
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="1af7c979-b808-4c70-8efc-ea82f6f590f1">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-h246-cgh4-7475">
      <p>### Impact
If [`BCast::ToShape`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) is given input larger than an `int32`, it will crash, despite being supposed to handle up to an `int64`. An example can be seen in [`tf.experimental.numpy.outer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) by passing in large input to the input `b`.
```python
import tensorflow as tf
value = tf.constant(shape=[2, 1024, 1024, 1024], value=False)
tf.experimental.numpy.outer(a=6,b=value)
```

### Patches
We have patched the issue in GitHub commit [8310bf8dd188ff780e7fc53245058215a05bdbe5](https://github.com/tensorflow/tensorflow/commit/8310bf8dd188ff780e7fc53245058215a05bdbe5).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattankul.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41890</cvename>
      <url>https://osv.dev/vulnerability/GHSA-h246-cgh4-7475</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-8w5g-3wcv-9g2j
  Aliases:   ['CVE-2022-41880']
  Details:   ### Impact
When the [`BaseCandidateSamplerOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/candidate_sampler_ops.cc) function  receives a value in `true_classes` larger than `range_max`, a heap oob vuln occurs. +++
  Fixed in:  ['2.10.1', '2.8.4', '2.9.3']
  Link:      https://osv.dev/vulnerability/GHSA-8w5g-3wcv-9g2j
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="7affd31d-c2ef-4a11-b425-b4ee20c58975">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-8w5g-3wcv-9g2j">
      <p>### Impact
When the [`BaseCandidateSamplerOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/candidate_sampler_ops.cc) function  receives a value in `true_classes` larger than `range_max`, a heap oob vuln occurs.
```python
tf.raw_ops.ThreadUnsafeUnigramCandidateSampler(
    true_classes=[[0x100000,1]],
    num_true = 2,
    num_sampled = 2,
    unique = False,
    range_max = 2,
    seed = 2,
    seed2 = 2)
```

### Patches
We have patched the issue in GitHub commit [b389f5c944cadfdfe599b3f1e4026e036f30d2d4](https://github.com/tensorflow/tensorflow/commit/b389f5c944cadfdfe599b3f1e4026e036f30d2d4).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41880</cvename>
      <url>https://osv.dev/vulnerability/GHSA-8w5g-3wcv-9g2j</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-jq6x-99hj-q636
  Aliases:   ['CVE-2022-41884']
  Details:   ### Impact
If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. E.g. the following raises an error: +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-jq6x-99hj-q636
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="c33da9d8-1fdb-4033-b895-5c3bbdd7d98f">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-jq6x-99hj-q636">
      <p>### Impact
If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. E.g. the following raises an error:
```python
np.ones((0, 2**31, 2**31))
```
An example of a proof of concept:
```python
import numpy as np
import tensorflow as tf

input_val = tf.constant([1])
shape_val = np.array([i for i in range(21)])

tf.broadcast_to(input=input_val,shape=shape_val)
```
The return value of `PyArray_SimpleNewFromData`, which returns null on such shapes, is not checked.

### Patches
We have patched the issue in GitHub commit [2b56169c16e375c521a3bc8ea658811cc0793784](https://github.com/tensorflow/tensorflow/commit/2b56169c16e375c521a3bc8ea658811cc0793784).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Pattarakrit Rattanukul.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41884</cvename>
      <url>https://osv.dev/vulnerability/GHSA-jq6x-99hj-q636</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-mv77-9g28-cwg3
  Aliases:   ['CVE-2022-41908']
  Details:   ### Impact
An input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in [`tf.raw_ops.PyFunc`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc). +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-mv77-9g28-cwg3
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="4c941213-dcb5-4ead-afd2-1d0286a4c39b">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>INSERT_VULNERABLE_VERSION_HERE</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-mv77-9g28-cwg3">
      <p>### Impact
An input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in [`tf.raw_ops.PyFunc`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).

```python
import tensorflow as tf

value = tf.constant(value=[1,2])
token = b'\xb0'
dataType = [tf.int32]

tf.raw_ops.PyFunc(input=value,token=token,Tout=dataType)
```

### Patches
We have patched the issue in GitHub commit [9f03a9d3bafe902c1e6beb105b2f24172f238645](https://github.com/tensorflow/tensorflow/commit/9f03a9d3bafe902c1e6beb105b2f24172f238645).

The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by pattarakritr@smu.edu.sg
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2022-41908</cvename>
      <url>https://osv.dev/vulnerability/GHSA-mv77-9g28-cwg3</url>
    </references>
    <dates>
      <discovery>2022-11-18</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-6hg6-5c2q-7rcr
  Aliases:   ['CVE-2023-25664']
  Details:   ### Impact
```python
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
import tensorflow as tf
print(tf.__version__)
with tf.device("CPU"): +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-6hg6-5c2q-7rcr
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="2b6c4797-f1f2-4529-bad9-f9e1c878ab2a">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-6hg6-5c2q-7rcr">
      <p>### Impact
```python
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
import tensorflow as tf
print(tf.__version__)
with tf.device("CPU"):
    ksize = [1, 40, 128, 1]
    strides = [1, 128, 128, 30]
    padding = "SAME"
    data_format = "NHWC"
    orig_input_shape = [11, 9, 78, 9]
    grad = tf.saturate_cast(tf.random.uniform([16, 16, 16, 16], minval=-128, maxval=129, dtype=tf.int64), dtype=tf.float32)
    res = tf.raw_ops.AvgPoolGrad(
        ksize=ksize,
        strides=strides,
        padding=padding,
        data_format=data_format,
        orig_input_shape=orig_input_shape,
        grad=grad,
    )
```

### Patches
We have patched the issue in GitHub commit [ddaac2bdd099bec5d7923dea45276a7558217e5b](https://github.com/tensorflow/tensorflow/commit/ddaac2bdd099bec5d7923dea45276a7558217e5b).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by &lt;evn@google.com&gt;
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25664</cvename>
      <url>https://osv.dev/vulnerability/GHSA-6hg6-5c2q-7rcr</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-93vr-9q9m-pj8p
  Aliases:   ['CVE-2023-25659']
  Details:   ### Impact
If the parameter `indices` for `DynamicStitch` does not match the shape of the parameter `data`, it can trigger an stack OOB read. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-93vr-9q9m-pj8p
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="80e74704-0591-41a8-ab7f-1c399400bba5">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-93vr-9q9m-pj8p">
      <p>### Impact
If the parameter `indices` for `DynamicStitch` does not match the shape of the parameter `data`, it can trigger an stack OOB read.

```python
import tensorflow as tf
func = tf.raw_ops.DynamicStitch
para={'indices': [[0xdeadbeef], [405], [519], [758], [1015]], 'data': [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}
y = func(**para)
```

### Patches
We have patched the issue in GitHub commit [ee004b18b976eeb5a758020af8880236cd707d05](https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This has been reported via Google OSS VRP.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25659</cvename>
      <url>https://osv.dev/vulnerability/GHSA-93vr-9q9m-pj8p</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-6wfh-89q8-44jq
  Aliases:   ['CVE-2023-25676']
  Details:   ### Impact
When running with XLA, `tf.raw_ops.ParallelConcat` segfaults with a nullptr dereference when given a parameter `shape` with rank that is not greater than zero. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-6wfh-89q8-44jq
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="da7fed76-6155-40ef-87c1-0bae9a524803">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-6wfh-89q8-44jq">
      <p>### Impact
When running with XLA, `tf.raw_ops.ParallelConcat` segfaults with a nullptr dereference when given a parameter `shape` with rank that is not greater than zero.

```python
import tensorflow as tf

func = tf.raw_ops.ParallelConcat
para = {'shape':  0, 'values': [1]}

@tf.function(jit_compile=True)
def test():
   y = func(**para)
   return y

test()
```

### Patches
We have patched the issue in GitHub commit [da66bc6d5ff466aee084f9e7397980a24890cd15](https://github.com/tensorflow/tensorflow/commit/da66bc6d5ff466aee084f9e7397980a24890cd15).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx of 360 AIVul Team
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25676</cvename>
      <url>https://osv.dev/vulnerability/GHSA-6wfh-89q8-44jq</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-qjqc-vqcf-5qvj
  Aliases:   ['CVE-2023-25660']
  Details:   ### Impact
When the parameter `summarize` of `tf.raw_ops.Print` is zero, the new method `SummarizeArray<bool>` will reference to a nullptr, leading to a seg fault. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-qjqc-vqcf-5qvj
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="0a74efdd-33c8-4cd4-ada5-ff0a5e747643">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-qjqc-vqcf-5qvj">
      <p>### Impact
When the parameter `summarize` of `tf.raw_ops.Print` is zero, the new method `SummarizeArray&lt;bool&gt;` will reference to a nullptr, leading to a seg fault.

```python
import tensorflow as tf

tf.raw_ops.Print(input =  tf.constant([1, 1, 1, 1],dtype=tf.int32),
                            data =  [[False, False, False, False], [False], [False, False, False]],
                            message =  'tmp/I',
                            first_n = 100,
                            summarize = 0)
```

### Patches
We have patched the issue in GitHub commit [6d423b8bcc9aa9f5554dc988c1c16d038b508df1](https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25660</cvename>
      <url>https://osv.dev/vulnerability/GHSA-qjqc-vqcf-5qvj</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-64jg-wjww-7c5w
  Aliases:   ['CVE-2023-25663']
  Details:   ### Impact
When ctx->step_containter() is a null ptr, the Lookup function will be executed with a null pointer.
```python
import tensorflow as tf +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-64jg-wjww-7c5w
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="4f038122-2140-4b95-b82e-9832f4188ee4">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-64jg-wjww-7c5w">
      <p>### Impact
When ctx-&gt;step_containter() is a null ptr, the Lookup function will be executed with a null pointer.
```python
import tensorflow as tf
tf.raw_ops.TensorArrayConcatV2(handle=['a', 'b'], flow_in = 0.1, dtype=tf.int32, element_shape_except0=1)
```

### Patches
We have patched the issue in GitHub commit [239139d2ae6a81ae9ba499ad78b56d9b2931538a](https://github.com/tensorflow/tensorflow/commit/239139d2ae6a81ae9ba499ad78b56d9b2931538a).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Yu Tian</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25663</cvename>
      <url>https://osv.dev/vulnerability/GHSA-64jg-wjww-7c5w</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-gw97-ff7c-9v96
  Aliases:   ['CVE-2023-25668']
  Details:   ### Impact
Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or RCE. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-gw97-ff7c-9v96
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="016b28b4-36e6-46f3-94a9-1e62c4d3be7f">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-gw97-ff7c-9v96">
      <p>### Impact
Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or RCE.
When axis is larger than the dim of input, c-&gt;Dim(input,axis) goes out of bound.
Same problem occurs in the QuantizeAndDequantizeV2/V3/V4/V4Grad operations too.
```python
import tensorflow as tf
@tf.function
def test():
    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],
    								   input_min=[1.0],
    								   input_max=[10.0],
    								   signed_input=True,
    								   num_bits=1,
    								   range_given=True,
    								   round_mode='HALF_TO_EVEN',
    								   narrow_range=True,
    								   axis=0x7fffffff)
test()
```



### Patches
We have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25668</cvename>
      <url>https://osv.dev/vulnerability/GHSA-gw97-ff7c-9v96</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-49rq-hwc3-x77w
  Aliases:   ['CVE-2023-25670']
  Details:   ### Impact
NPE in QuantizedMatMulWithBiasAndDequantize with MKL enable 
```python
import tensorflow as tf

func = tf.raw_ops.QuantizedMatMulWithBiasAndDequantize +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-49rq-hwc3-x77w
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="a19b822f-31dc-4072-9d2d-e54359f25e2f">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-49rq-hwc3-x77w">
      <p>### Impact
NPE in QuantizedMatMulWithBiasAndDequantize with MKL enable 
```python
import tensorflow as tf

func = tf.raw_ops.QuantizedMatMulWithBiasAndDequantize
para={'a': tf.constant(138, dtype=tf.quint8), 'b': tf.constant(4, dtype=tf.qint8), 'bias': [[31.81644630432129, 47.21876525878906], [109.95201110839844, 152.07968139648438]], 'min_a': 141.5337138686371, 'max_a': [73.84139251708984, 173.15280151367188], 'min_b': [], 'max_b': [[16.128345489501953, 193.26820373535156]], 'min_freezed_output': [], 'max_freezed_output': [115.50032806396484, 156.974853515625], 'Toutput': 1.0, 'transpose_a': True, 'transpose_b': False, 'input_quant_mode': 'MIN_FIRST'}

func(**para)
```

### Patches
We have patched the issue in GitHub commit [8a47a39d9697969206d23a523c977238717e8727](https://github.com/tensorflow/tensorflow/commit/8a47a39d9697969206d23a523c977238717e8727).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25670</cvename>
      <url>https://osv.dev/vulnerability/GHSA-49rq-hwc3-x77w</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-gf97-q72m-7579
  Aliases:   ['CVE-2023-25674']
  Details:   ### Impact
NPE in RandomShuffle with XLA enable 
```python
import tensorflow as tf

func = tf.raw_ops.RandomShuffle
para = {'value': 1e+20, 'seed': -4294967297, 'seed2': -2147483649} +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-gf97-q72m-7579
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="8b45c9fb-f3d1-4e60-81e6-a8de8571a2a3">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-gf97-q72m-7579">
      <p>### Impact
NPE in RandomShuffle with XLA enable 
```python
import tensorflow as tf

func = tf.raw_ops.RandomShuffle
para = {'value': 1e+20, 'seed': -4294967297, 'seed2': -2147483649}

@tf.function(jit_compile=True)
def test():
   y = func(**para)
   return y

test()
```

### Patches
We have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25674</cvename>
      <url>https://osv.dev/vulnerability/GHSA-gf97-q72m-7579</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-7x4v-9gxg-9hwj
  Aliases:   ['CVE-2023-25675']
  Details:   ### Impact
When running with XLA, `tf.raw_ops.Bincount` segfaults when given a parameter `weights` that is neither the same shape as parameter `arr` nor a length-0 tensor. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-7x4v-9gxg-9hwj
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="46a45e12-8b1c-480f-8173-38b149373748">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-7x4v-9gxg-9hwj">
      <p>### Impact
When running with XLA, `tf.raw_ops.Bincount` segfaults when given a parameter `weights` that is neither the same shape as parameter `arr` nor a length-0 tensor.

```python
import tensorflow as tf

func = tf.raw_ops.Bincount
para={'arr': 6, 'size': 804, 'weights': [52, 351]}

@tf.function(jit_compile=True)
def fuzz_jit():
 y = func(**para)
 return y

print(fuzz_jit())
```

### Patches
We have patched the issue in GitHub commit [8ae76cf085f4be26295d2ecf2081e759e04b8acf](https://github.com/tensorflow/tensorflow/commit/8ae76cf085f4be26295d2ecf2081e759e04b8acf).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx of 360 AIVul Team
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25675</cvename>
      <url>https://osv.dev/vulnerability/GHSA-7x4v-9gxg-9hwj</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-j5w9-hmfh-4cr6
  Aliases:   ['CVE-2023-25671']
  Details:   ### Impact
Out-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder. Bug with tfg-translate call to InitMlir. The problem happens with generic functions, as it is already handled for non-generic functions. This is because they, unlike non-generic functions, are using the "old importer". A better long-term solution may be to have the "new importer" handle generic functions. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-j5w9-hmfh-4cr6
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="fff7f09d-ef81-4be6-bdca-ae1a0ed9a6b3">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-j5w9-hmfh-4cr6">
      <p>### Impact
Out-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder. Bug with tfg-translate call to InitMlir. The problem happens with generic functions, as it is already handled for non-generic functions. This is because they, unlike non-generic functions, are using the "old importer". A better long-term solution may be to have the "new importer" handle generic functions.

### Patches
We have patched the issue in GitHub
- commit [760322a71ac9033e122ef1f4b1c62813021e5938](https://github.com/tensorflow/tensorflow/commit/760322a71ac9033e122ef1f4b1c62813021e5938).
- commit [2eedc8f676d2c3b8be9492e547b2bc814c10b367](https://github.com/tensorflow/tensorflow/commit/2eedc8f676d2c3b8be9492e547b2bc814c10b367)

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx

### Affiliation
360 AIVul

</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25671</cvename>
      <url>https://osv.dev/vulnerability/GHSA-j5w9-hmfh-4cr6</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-94mm-g2mv-8p7r
  Aliases:   ['CVE-2023-25672']
  Details:   ### Impact
The function `tf.raw_ops.LookupTableImportV2` cannot handle scalars in the `values` parameter and gives an NPE. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-94mm-g2mv-8p7r
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="9cec5cac-2391-486a-aa5a-f78712193aaa">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-94mm-g2mv-8p7r">
      <p>### Impact
The function `tf.raw_ops.LookupTableImportV2` cannot handle scalars in the `values` parameter and gives an NPE.

```python
import tensorflow as tf

v = tf.Variable(1)

@tf.function(jit_compile=True)
def test():
   func = tf.raw_ops.LookupTableImportV2
   para={'table_handle': v.handle,'keys': [62.98910140991211, 94.36528015136719], 'values': -919}

   y = func(**para)
   return y

print(test())
```

### Patches
We have patched the issue in GitHub commit [980b22536abcbbe1b4a5642fc940af33d8c19b69](https://github.com/tensorflow/tensorflow/commit/980b22536abcbbe1b4a5642fc940af33d8c19b69).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx of 360 AIVul Team
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25672</cvename>
      <url>https://osv.dev/vulnerability/GHSA-94mm-g2mv-8p7r</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-rcf8-g8jv-vg6p
  Aliases:   ['CVE-2023-25669']
  Details:   ### Impact
If the stride and window size are not positive for `tf.raw_ops.AvgPoolGrad`, it can give an FPE.

```python
import tensorflow as tf +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-rcf8-g8jv-vg6p
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="7afba904-5191-4fc0-9eae-266b8efd0ab0">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-rcf8-g8jv-vg6p">
      <p>### Impact
If the stride and window size are not positive for `tf.raw_ops.AvgPoolGrad`, it can give an FPE.

```python
import tensorflow as tf
import numpy as np

@tf.function(jit_compile=True)
def test():
   y = tf.raw_ops.AvgPoolGrad(orig_input_shape=[1,0,0,0], grad=[[[[0.39117979]]]], ksize=[1,0,0,0], strides=[1,0,0,0], padding="SAME", data_format="NCHW")
   return y

print(test())
```

### Patches
We have patched the issue in GitHub commit [1295ae4dbb52fe06b19733b0257e2340d7b63b8d](https://github.com/tensorflow/tensorflow/commit/1295ae4dbb52fe06b19733b0257e2340d7b63b8d).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx of 360 AIVul Team
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25669</cvename>
      <url>https://osv.dev/vulnerability/GHSA-rcf8-g8jv-vg6p</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-7jvm-xxmr-v5cw
  Aliases:   ['CVE-2023-25662']
  Details:   ### Impact
TFversion 2.11.0 //tensorflow/core/ops/array_ops.cc:1067 const Tensor* hypothesis_shape_t = c->input_tensor(2); std::vector<DimensionHandle> dims(hypothesis_shape_t->NumElements() - 1); for (int i = 0; i < dims.size(); ++i) { dims[i] = c->MakeDim(std::max(h_values(i), t_values(i))); } +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-7jvm-xxmr-v5cw
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="851a5b8a-7395-4e4c-8aaa-307818f7fc75">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-7jvm-xxmr-v5cw">
      <p>### Impact
TFversion 2.11.0 //tensorflow/core/ops/array_ops.cc:1067 const Tensor* hypothesis_shape_t = c-&gt;input_tensor(2); std::vector&lt;DimensionHandle&gt; dims(hypothesis_shape_t-&gt;NumElements() - 1); for (int i = 0; i &lt; dims.size(); ++i) { dims[i] = c-&gt;MakeDim(std::max(h_values(i), t_values(i))); }

if hypothesis_shape_t is empty, hypothesis_shape_t-&gt;NumElements() - 1 will be integer overflow, and the it will deadlock
```python
import tensorflow as tf
para={
    'hypothesis_indices': [[]],
    'hypothesis_values': ['tmp/'],
    'hypothesis_shape': [],
    'truth_indices': [[]],
    'truth_values': [''],
    'truth_shape': [],
    'normalize': False
    }
tf.raw_ops.EditDistance(**para)
```

### Patches
We have patched the issue in GitHub commit [08b8e18643d6dcde00890733b270ff8d9960c56c](https://github.com/tensorflow/tensorflow/commit/08b8e18643d6dcde00890733b270ff8d9960c56c).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25662</cvename>
      <url>https://osv.dev/vulnerability/GHSA-7jvm-xxmr-v5cw</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-647v-r7qq-24fh
  Aliases:   ['CVE-2023-25673']
  Details:   ### Impact
FPE in TensorListSplit with XLA 
```python
import tensorflow as tf

func = tf.raw_ops.TensorListSplit
para = {'tensor': [1], 'element_shape': -1, 'lengths': [0]} +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-647v-r7qq-24fh
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="71aa420e-3953-4bcb-9a8a-6264abb39f8a">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-647v-r7qq-24fh">
      <p>### Impact
FPE in TensorListSplit with XLA 
```python
import tensorflow as tf

func = tf.raw_ops.TensorListSplit
para = {'tensor': [1], 'element_shape': -1, 'lengths': [0]}

@tf.function(jit_compile=True)
def fuzz_jit():
 y = func(**para)
 return y

print(fuzz_jit())
```

### Patches
We have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25673</cvename>
      <url>https://osv.dev/vulnerability/GHSA-647v-r7qq-24fh</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-68v3-g9cm-rmm6
  Aliases:   ['CVE-2023-25658']
  Details:   ### Impact
Out of bounds read in GRUBlockCellGrad
```python
func = tf.raw_ops.GRUBlockCellGrad

para = {'x': [[21.1, 156.2], [83.3, 115.4]], 'h_prev': array([[136.5], +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-68v3-g9cm-rmm6
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="41cfbece-bf58-4648-af00-643963a9c55f">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-68v3-g9cm-rmm6">
      <p>### Impact
Out of bounds read in GRUBlockCellGrad
```python
func = tf.raw_ops.GRUBlockCellGrad

para = {'x': [[21.1, 156.2], [83.3, 115.4]], 'h_prev': array([[136.5],
      [136.6]]), 'w_ru': array([[26.7,  0.8],
      [47.9, 26.1],
      [26.2, 26.3]]), 'w_c': array([[ 0.4],
      [31.5],
      [ 0.6]]), 'b_ru': array([0.1, 0.2 ], dtype=float32), 'b_c': 0x41414141, 'r': array([[0.3],
      [0.4]], dtype=float32), 'u': array([[5.7],
      [5.8]]), 'c': array([[52.9],
      [53.1]]), 'd_h': array([[172.2],
      [188.3 ]])}
```

### Patches
We have patched the issue in GitHub commit [ff459137c2716a2a60f7d441b855fcb466d778cb](https://github.com/tensorflow/tensorflow/commit/ff459137c2716a2a60f7d441b855fcb466d778cb).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25658</cvename>
      <url>https://osv.dev/vulnerability/GHSA-68v3-g9cm-rmm6</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-5w96-866f-6rm8
  Aliases:   ['CVE-2023-27579']
  Details:   ### Impact
Constructing a tflite model with a paramater `filter_input_channel` of less than 1 gives a FPE.


### Patches
We have patched the issue in GitHub commit [34f8368c535253f5c9cb3a303297743b62442aaa](https://github.com/tensorflow/tensorflow/commit/34f8368c535253f5c9cb3a303297743b62442aaa). +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-5w96-866f-6rm8
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="79ebea96-322e-4ee1-9790-975559cbbc97">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-5w96-866f-6rm8">
      <p>### Impact
Constructing a tflite model with a paramater `filter_input_channel` of less than 1 gives a FPE.


### Patches
We have patched the issue in GitHub commit [34f8368c535253f5c9cb3a303297743b62442aaa](https://github.com/tensorflow/tensorflow/commit/34f8368c535253f5c9cb3a303297743b62442aaa).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability was reported by Wang Xuan of Qihoo 360 AIVul Team.
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-27579</cvename>
      <url>https://osv.dev/vulnerability/GHSA-5w96-866f-6rm8</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-f637-vh3r-vfh2
  Aliases:   ['CVE-2023-25666']
  Details:   ### Impact
version:2.11.0 //core/ops/audio_ops.cc:70

Status SpectrogramShapeFn(InferenceContext* c) { ShapeHandle input; TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &input)); int32_t window_size; TF_RETURN_IF_ERROR(c->GetAttr("window_size", &window_size)); int32_t stride; TF_RETURN_IF_ERROR(c->GetAttr("stride", &stride)); .....[1] +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-f637-vh3r-vfh2
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="bf453e77-9f90-46e6-9a63-8a8c27ddb8b4">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-f637-vh3r-vfh2">
      <p>### Impact
version:2.11.0 //core/ops/audio_ops.cc:70

Status SpectrogramShapeFn(InferenceContext* c) { ShapeHandle input; TF_RETURN_IF_ERROR(c-&gt;WithRank(c-&gt;input(0), 2, &input)); int32_t window_size; TF_RETURN_IF_ERROR(c-&gt;GetAttr("window_size", &window_size)); int32_t stride; TF_RETURN_IF_ERROR(c-&gt;GetAttr("stride", &stride)); .....[1]

DimensionHandle input_length = c-&gt;Dim(input, 0); DimensionHandle input_channels = c-&gt;Dim(input, 1);

DimensionHandle output_length; if (!c-&gt;ValueKnown(input_length)) { output_length = c-&gt;UnknownDim(); } else { const int64_t input_length_value = c-&gt;Value(input_length); const int64_t length_minus_window = (input_length_value - window_size); int64_t output_length_value; if (length_minus_window &lt; 0) { output_length_value = 0; } else { output_length_value = 1 + (length_minus_window / stride); .....[2] } output_length = c-&gt;MakeDim(output_length_value); }

Get the value of stride at [1], and the used at [2]
```python
import tensorflow as tf

para = {'input': tf.constant([[14.], [24.]], dtype=tf.float32), 'window_size': 1, 'stride': 0, 'magnitude_squared': False}
func = tf.raw_ops.AudioSpectrogram

@tf.function(jit_compile=True)
def fuzz_jit():
   y = func(**para)
   return y

fuzz_jit()
```

### Patches
We have patched the issue in GitHub commit [d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14](https://github.com/tensorflow/tensorflow/commit/d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by r3pwnx
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25666</cvename>
      <url>https://osv.dev/vulnerability/GHSA-f637-vh3r-vfh2</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-558h-mq8x-7q9g
  Aliases:   ['CVE-2023-25665']
  Details:   ### Impact
When `SparseSparseMaximum` is given invalid sparse tensors as inputs, it can give an NPE. 

```python
import tensorflow as tf +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-558h-mq8x-7q9g
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="82a56e58-3211-42ae-915d-5ed5850a3aee">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-558h-mq8x-7q9g">
      <p>### Impact
When `SparseSparseMaximum` is given invalid sparse tensors as inputs, it can give an NPE. 

```python
import tensorflow as tf
tf.raw_ops.SparseSparseMaximum(
 a_indices=[[1]],
 a_values =[ 0.1 ],
 a_shape = [2],
 b_indices=[[]],
 b_values =[2 ],
 b_shape = [2],
)
```

### Patches
We have patched the issue in GitHub commit [5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04](https://github.com/tensorflow/tensorflow/commit/5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25665</cvename>
      <url>https://osv.dev/vulnerability/GHSA-558h-mq8x-7q9g</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-f49c-87jh-g47q
  Aliases:   ['CVE-2023-25801']
  Details:   ### Impact
`nn_ops.fractional_avg_pool_v2` and `nn_ops.fractional_max_pool_v2` require the first and fourth elements of their parameter `pooling_ratio` to be equal to 1.0, as pooling on batch and channel dimensions is not supported. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-f49c-87jh-g47q
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="833d37ff-0402-44a0-b302-9c5b35ff0cc5">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-f49c-87jh-g47q">
      <p>### Impact
`nn_ops.fractional_avg_pool_v2` and `nn_ops.fractional_max_pool_v2` require the first and fourth elements of their parameter `pooling_ratio` to be equal to 1.0, as pooling on batch and channel dimensions is not supported.

```python
import tensorflow as tf
import os
import numpy as np
from tensorflow.python.ops import nn_ops
try:
  arg_0_tensor = tf.random.uniform([3, 30, 50, 3], dtype=tf.float64)
  arg_0 = tf.identity(arg_0_tensor)
  arg_1_0 = 2
  arg_1_1 = 3
  arg_1_2 = 1
  arg_1_3 = 1
  arg_1 = [arg_1_0,arg_1_1,arg_1_2,arg_1_3,]
  arg_2 = True
  arg_3 = True
  seed = 341261001
  out = nn_ops.fractional_avg_pool_v2(arg_0,arg_1,arg_2,arg_3,seed=seed,)
except Exception as e:
  print("Error:"+str(e))
```

### Patches
We have patched the issue in GitHub commit [ee50d1e00f81f62a4517453f721c634bbb478307](https://github.com/tensorflow/tensorflow/commit/ee50d1e00f81f62a4517453f721c634bbb478307).

The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.

### Attribution
This vulnerability was reported by [dmc1778](https://github.com/dmc1778), of [nimashiri2012@gmail.com](mailto:nimashiri2012@gmail.com).
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25801</cvename>
      <url>https://osv.dev/vulnerability/GHSA-f49c-87jh-g47q</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-fqm2-gh8w-gr68
  Aliases:   ['CVE-2023-25667']
  Details:   ### Impact
Integer overflow occurs when 2^31 <= num_frames * height * width * channels < 2^32, for example Full HD screencast of at least 346 frames. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-fqm2-gh8w-gr68
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="85887334-008a-455d-b4be-f32f3f3149dc">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-fqm2-gh8w-gr68">
      <p>### Impact
Integer overflow occurs when 2^31 &lt;= num_frames * height * width * channels &lt; 2^32, for example Full HD screencast of at least 346 frames.
```python
import urllib.request
dat = urllib.request.urlopen('https://raw.githubusercontent.com/tensorflow/tensorflow/1c38ad9b78ffe06076745a1ee00cec42f39ff726/tensorflow/core/lib/gif/testdata/3g_multiframe.gif').read()
import tensorflow as tf
tf.io.decode_gif(dat)
```

### Patches
We have patched the issue in GitHub commit [8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d](https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d).

The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1


### For more information
Please consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.


### Attribution
This vulnerability has been reported by Andrei
</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25667</cvename>
      <url>https://osv.dev/vulnerability/GHSA-fqm2-gh8w-gr68</url>
    </references>
    <dates>
      <discovery>2023-03-24</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-fxgc-95xx-grvq
  Aliases:   ['CVE-2023-25661']
  Details:   ### Impact
A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. +++
  Fixed in:  ['2.11.1']
  Link:      https://osv.dev/vulnerability/GHSA-fxgc-95xx-grvq
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="b43569a6-5f61-419c-98ae-3a8899557349">
    <topic>py-tensorflow -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-tensorflow</name>
    <name>py38-tensorflow</name>
    <name>py39-tensorflow</name>
    <name>py310-tensorflow</name>
    <name>py311-tensorflow</name>
    <range><lt>2.11.1</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-fxgc-95xx-grvq">
      <p>### Impact
A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.
A proof of concept can be constructed with the `Convolution3DTranspose` function, which works well with expected inputs and can be deployed in real-world systems. However, if the model is called with a malicious input which has a zero dimension, it gives Check Failed failure and crashes.

```python
import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding="same")
        
    def call(self, input):
        return self.conv(input)
model = MyModel() # Defines a valid model.

x = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.
output = model.predict(x)
print(output.shape) # (1, 32, 32, 32, 2)

x = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.
output = model(x) # crash
```
This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.

### Patches
This has been patched the issue in
- GitHub commit [948fe6369a5711d4b4568ea9bbf6015c6dfb77e2](https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2)
- GitHub commit [85db5d07db54b853484bfd358c3894d948c36baf](https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf).

The fix will be included in TensorFlow 2.12.0. This commit will also be cherrypicked into TensorFlow 2.11.1.

### For more information
Please consult [Tensor Flow's security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact them with issues and questions.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2023-25661</cvename>
      <url>https://osv.dev/vulnerability/GHSA-fxgc-95xx-grvq</url>
    </references>
    <dates>
      <discovery>2023-03-27</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-h6q3-vv32-2cq5
  Aliases:   ['CVE-2022-41894']
  Details:   ### Impact
The reference kernel of the [`CONV_3D_TRANSPOSE`](https://github.com/tensorflow/tensorflow/blob/091e63f0ea33def7ecad661a5ac01dcafbafa90b/tensorflow/lite/kernels/internal/reference/conv3d_transpose.h#L121) TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. +++
  Fixed in:  ['2.8.4', '2.9.3', '2.10.1']
  Link:      https://osv.dev/vulnerability/GHSA-h6q3-vv32-2cq5
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'cryptography 3.4.8' / FreeBSD port 'py39-cryptography 3.4.8_1,1' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'security/py-cryptography'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-cryptography-3.4.8_1,1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-w7pp-m8wf-vj6r
  Aliases:   ['CVE-2023-23931']
  Details:   Previously, `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers: +++
  Fixed in:  ['39.0.1']
  Link:      https://osv.dev/vulnerability/GHSA-w7pp-m8wf-vj6r
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-x4qr-2fvf-3mr5
  Aliases:   ['CVE-2023-0286']
  Details:   pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20221213.txt and https://www.openssl.org/news/secadv/20230207.txt. +++
  Fixed in:  ['39.0.1']
  Link:      https://osv.dev/vulnerability/GHSA-x4qr-2fvf-3mr5
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'kerberos 1.3.1' / FreeBSD port 'py39-kerberos 1.3.1' is vulnerable:
  Please report to  maintainer 'dvl@FreeBSD.org' for port 'security/py-kerberos'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-kerberos-1.3.1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2017-49
  Aliases:   ['CVE-2015-3206']
  Details:   The checkPassword function in python-kerberos does not authenticate the KDC it attempts to communicate with, which allows remote attackers to cause a denial of service (bad response), or have other unspecified impact by performing a man-in-the-middle attack. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2017-49
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'pysaml2 4.9.0' / FreeBSD port 'py39-pysaml24 4.9.0_1' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'security/py-pysaml24'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-pysaml2-7.4.1 (=C)
  py39-pysaml24-4.9.0_1 (=W) (=C)
  py39-pysaml26-6.5.2 (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2020-94
  Aliases:   ['CVE-2020-5390', 'GHSA-qf7v-8hj3-4xw7']
  Details:   PySAML2 before 5.0.0 does not check that the signature in a SAML document is enveloped and thus signature wrapping is effective, i.e., it is affected by XML Signature Wrapping (XSW). The signature information and the node/object that is signed can be in different places and thus the signature verification will succeed, but the wrong data will be used. This specifically affects the verification of assertion that have been signed. +++
  Fixed in:  ['5.0.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2020-94
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="08de84df-1af7-4892-9422-053ae8343ad8">
    <topic>py-pysaml2 -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-pysaml24</name>
    <name>py38-pysaml24</name>
    <name>py39-pysaml24</name>
    <name>py310-pysaml24</name>
    <name>py311-pysaml24</name>
    <range><lt>5.0.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/PYSEC-2020-94">
      <p>PySAML2 before 5.0.0 does not check that the signature in a SAML document is enveloped and thus signature wrapping is effective, i.e., it is affected by XML Signature Wrapping (XSW). The signature information and the node/object that is signed can be in different places and thus the signature verification will succeed, but the wrong data will be used. This specifically affects the verification of assertion that have been signed.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-5390</cvename>
      <url>https://osv.dev/vulnerability/PYSEC-2020-94</url>
    </references>
    <dates>
      <discovery>2020-01-13</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        PYSEC-2021-48
  Aliases:   ['CVE-2021-21238', 'GHSA-f4g9-h89h-jgv9']
  Details:   PySAML2 is a pure python implementation of SAML Version 2 Standard. PySAML2 before 6.5.0 has an improper verification of cryptographic signature vulnerability. All users of pysaml2 that need to validate signed SAML documents are impacted. The vulnerability is a variant of XML Signature wrapping because it did not validate the SAML document against an XML schema. This allowed invalid XML documents to be processed and such a document can trick pysaml2 with a wrapped signature. This is fixed in PySAML2 6.5.0. +++
  Fixed in:  ['6.5.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-48
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2021-49
  Aliases:   ['CVE-2021-21239', 'GHSA-5p3x-r448-pc62']
  Details:   PySAML2 is a pure python implementation of SAML Version 2 Standard. PySAML2 before 6.5.0 has an improper verification of cryptographic signature vulnerability. Users of pysaml2 that use the default CryptoBackendXmlSec1 backend and need to verify signed SAML documents are impacted. PySAML2 does not ensure that a signed SAML document is correctly signed. The default CryptoBackendXmlSec1 backend is using the xmlsec1 binary to verify the signature of signed SAML documents, but by default xmlsec1 accepts any type of key found within the given document. xmlsec1 needs to be configured explicitly to only use only _x509 certificates_ for the verification process of the SAML document signature. This is fixed in PySAML2 6.5.0. +++
  Fixed in:  ['6.5.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-49
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-qf7v-8hj3-4xw7
  Aliases:   ['CVE-2020-5390']
  Details:   PySAML2 before 5.0.0 does not check that the signature in a SAML document is enveloped and thus signature wrapping is effective, i.e., it is affected by XML Signature Wrapping (XSW). The signature information and the node/object that is signed can be in different places and thus the signature verification will succeed, but the wrong data will be used. This specifically affects the verification of assertion that have been signed. +++
  Fixed in:  ['5.0.0']
  Link:      https://osv.dev/vulnerability/GHSA-qf7v-8hj3-4xw7
  Source:    osv

=> UNREPORTED FreeBSD VuXML vulnerability skeleton:
  <vuln vid="45ebc53b-1ab5-4fbe-a36a-5eba422a732e">
    <topic>py-pysaml2 -- INSERT_VULNERABILITY_SUMMARY_HERE</topic>
    <affects>
      <package>
    <name>py37-pysaml24</name>
    <name>py38-pysaml24</name>
    <name>py39-pysaml24</name>
    <name>py310-pysaml24</name>
    <name>py311-pysaml24</name>
    <range><lt>5.0.0</lt></range>
      </package>
    </affects>
    <description>
      <body xmlns="http://www.w3.org/1999/xhtml">
    <p>INSERT_SOURCE_NAME_HERE reports:</p>
    <blockquote cite="https://osv.dev/vulnerability/GHSA-qf7v-8hj3-4xw7">
      <p>PySAML2 before 5.0.0 does not check that the signature in a SAML document is enveloped and thus signature wrapping is effective, i.e., it is affected by XML Signature Wrapping (XSW). The signature information and the node/object that is signed can be in different places and thus the signature verification will succeed, but the wrong data will be used. This specifically affects the verification of assertion that have been signed.</p>
    </blockquote>
      </body>
    </description>
    <references>
      <cvename>CVE-2020-5390</cvename>
      <url>https://osv.dev/vulnerability/GHSA-qf7v-8hj3-4xw7</url>
    </references>
    <dates>
      <discovery>2020-01-13</discovery>
      <entry>2023-04-21</entry>
    </dates>
  </vuln>

PYSEC vulnerability:
  Id:        GHSA-f4g9-h89h-jgv9
  Aliases:   ['CVE-2021-21238']
  Details:   ### Impact

All users of pysaml2 that use the default `CryptoBackendXmlSec1` backend and need to verify signed SAML documents are impacted. `pysaml2 <= 6.4.1` does not validate the SAML document against an XML schema. This allows invalid XML documents to trick the verification process, by presenting elements with a valid signature inside elements whose content has been malformed. The verification is offloaded to `xmlsec1` and `xmlsec1` will not validate every signature in the given document, but only the first it finds in the given scope. +++
  Fixed in:  ['6.5.0']
  Link:      https://osv.dev/vulnerability/GHSA-f4g9-h89h-jgv9
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-5p3x-r448-pc62
  Aliases:   ['CVE-2021-21239']
  Details:   ### Impact

All users of pysaml2 that use the default `CryptoBackendXmlSec1` backend and need to verify signed SAML documents are impacted. `pysaml2 <= 6.4.1` does not ensure that a signed SAML document is correctly signed. The default `CryptoBackendXmlSec1` backend is using the `xmlsec1` binary to verify the signature of signed SAML documents, but by default, `xmlsec1` accepts any type of key found within the given document. `xmlsec1` needs to be configured explicitly to only use only _x509 certificates_ for the verification process of the SAML document signature. +++
  Fixed in:  ['6.5.0']
  Link:      https://osv.dev/vulnerability/GHSA-5p3x-r448-pc62
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'ansible 7.1.0' / FreeBSD port 'py39-ansible 7.1.0' is vulnerable:
  Please report to  maintainer '0mp@FreeBSD.org' for port 'sysutils/ansible'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-ansible-7.1.0 (=W) (=C)
  py39-ansible-core-2.14.3 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2020-221
  Aliases:   ['CVE-2020-25636']
  Details:   A flaw was found in Ansible Base when using the aws_ssm connection plugin as there is no namespace separation for file transfers. Files are written directly to the root bucket, making possible to have collisions when running multiple ansible processes. This issue affects mainly the service availability. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2020-221
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2020-220
  Aliases:   ['CVE-2020-25635']
  Details:   A flaw was found in Ansible Base when using the aws_ssm connection plugin as garbage collector is not happening after playbook run is completed. Files would remain in the bucket exposing the data. This issue affects directly data confidentiality. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2020-220
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2021-125
  Aliases:   ['CVE-2021-3532']
  Details:   A flaw was found in Ansible where the secret information present in async_files are getting disclosed when the user changes the jobdir to a world readable directory. Any secret information in an async status file will be readable by a malicious user on that system. This flaw affects Ansible Tower 3.7 and Ansible Automation Platform 1.2. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2021-125
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'psutil 1.2.1' / FreeBSD port 'py39-psutil121 1.2.1_2' is vulnerable:
  Please report to  maintainer 'bofh@FreeBSD.org' for port 'sysutils/py-psutil121'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-psutil-5.9.4 (=C)
  py39-psutil121-1.2.1_2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2019-41
  Aliases:   ['CVE-2019-18874', 'GHSA-qfc5-mcwq-26q8']
  Details:   psutil (aka python-psutil) through 5.6.5 can have a double free. This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object. +++
  Fixed in:  ['5.6.6']
  Link:      https://osv.dev/vulnerability/PYSEC-2019-41
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-qfc5-mcwq-26q8
  Aliases:   ['CVE-2019-18874']
  Details:   psutil (aka python-psutil) through 5.6.5 can have a double free. This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object. +++
  Fixed in:  ['5.6.6']
  Link:      https://osv.dev/vulnerability/GHSA-qfc5-mcwq-26q8
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'dparse 0.5.1' / FreeBSD port 'py39-dparse 0.5.1' is vulnerable:
  Please report to  maintainer 'kai@FreeBSD.org' for port 'textproc/py-dparse'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-dparse-0.5.1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-8fg9-p83m-x5pq
  Aliases:   ['CVE-2022-39280']
  Details:   ### Impact
dparse versions prior to 0.5.1 contain a regular expression that is vulnerable to [ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) (Regular Expression Denial of Service). +++
  Fixed in:  ['0.5.2']
  Link:      https://osv.dev/vulnerability/GHSA-8fg9-p83m-x5pq
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2022-301
  Aliases:   ['CVE-2022-39280', 'GHSA-8fg9-p83m-x5pq']
  Details:   dparse is a parser for Python dependency files. dparse in versions before 0.5.2 contain a regular expression that is vulnerable to a Regular Expression Denial of Service. All the users parsing index server URLs with dparse are impacted by this vulnerability. A patch has been applied in version `0.5.2`, all the users are advised to upgrade to `0.5.2` as soon as possible. Users unable to upgrade should avoid passing index server URLs in the source file to be parsed. +++
  Fixed in:  ['0.5.2']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-301
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'markdown2 2.3.6' / FreeBSD port 'py39-markdown2 2.3.6' is vulnerable:
  Please report to  maintainer 'wen@FreeBSD.org' for port 'textproc/py-markdown2'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-markdown2-2.3.6 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-20
  Aliases:   ['CVE-2021-26813', 'GHSA-jr9p-r423-9m2r']
  Details:   markdown2 >=1.0.1.18, fixed in 2.4.0, is affected by a regular expression denial of service vulnerability. If an attacker provides a malicious string, it can make markdown2 processing difficult or delayed for an extended period of time. +++
  Fixed in:  ['2.4.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-20
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2020-65
  Aliases:   ['CVE-2020-11888', 'GHSA-fv3h-8x5j-pvgq']
  Details:   python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \w+ match succeeds. For example, an attack might use elementname@ or elementname- with an onclick attribute. +++
  Fixed in:  ['2.3.9']
  Link:      https://osv.dev/vulnerability/PYSEC-2020-65
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-fv3h-8x5j-pvgq
  Aliases:   ['CVE-2020-11888']
  Details:   python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \w+ match succeeds. For example, an attack might use elementname@ or elementname- with an onclick attribute. +++
  Fixed in:  ['2.3.9']
  Link:      https://osv.dev/vulnerability/GHSA-fv3h-8x5j-pvgq
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-jr9p-r423-9m2r
  Aliases:   ['CVE-2021-26813']
  Details:   markdown2 >=1.0.1.18, fixed in 2.4.0, is affected by a regular expression denial of service vulnerability. If an attacker provides a malicious string, it can make markdown2 processing difficult or delayed for an extended period of time. +++
  Fixed in:  ['2.4.0']
  Link:      https://osv.dev/vulnerability/GHSA-jr9p-r423-9m2r
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'pygments 2.5.2' / FreeBSD port 'py39-pygments-25 2.5.2' is vulnerable:
  Please report to  maintainer 'nivit@FreeBSD.org' for port 'textproc/py-pygments-25'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-pygments-2.15.0 (=W) (=C)
  py39-pygments-25-2.5.2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-140
  Aliases:   ['CVE-2021-20270', 'GHSA-9w8r-397f-prfh']
  Details:   An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the "exception" keyword. +++
  Fixed in:  ['2.7.4']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-140
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2021-141
  Aliases:   ['CVE-2021-27291', 'GHSA-pq64-v7f5-gqh8']
  Details:   In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions. Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS. By crafting malicious input, an attacker can cause a denial of service. +++
  Fixed in:  ['2.7.4']
  Link:      https://osv.dev/vulnerability/PYSEC-2021-141
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-pq64-v7f5-gqh8
  Aliases:   ['CVE-2021-27291']
  Details:   In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions. Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS. By crafting malicious input, an attacker can cause a denial of service. +++
  Fixed in:  ['2.7.4']
  Link:      https://osv.dev/vulnerability/GHSA-pq64-v7f5-gqh8
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-9w8r-397f-prfh
  Aliases:   ['CVE-2021-20270']
  Details:   An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the "exception" keyword. +++
  Fixed in:  ['2.7.4']
  Link:      https://osv.dev/vulnerability/GHSA-9w8r-397f-prfh
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'beaker 1.12.1' / FreeBSD port 'py39-beaker 1.12.1' is vulnerable:
  Please report to  maintainer 'python@FreeBSD.org' for port 'www/py-beaker'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-beaker-1.12.1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2020-216
  Aliases:   ['CVE-2013-7489', 'GHSA-3cwm-7jmm-774w']
  Details:   The Beaker library through 1.11.0 for Python is affected by deserialization of untrusted data, which could lead to arbitrary code execution. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2020-216
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'django-photologue 3.15' / FreeBSD port 'py39-django-photologue 3.15_1' is vulnerable:
  Please report to  maintainer 'ports@caomhin.org' for port 'www/py-django-photologue'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-django-photologue-3.15_1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-287q-jfcp-9vhv
  Aliases:   ['CVE-2022-4526']
  Details:   A vulnerability was found in django-photologue up to 3.15.1 and classified as problematic. Affected by this issue is some unknown functionality of the file photologue/templates/photologue/photo_detail.html of the component Default Template Handler. The manipulation of the argument object.caption leads to cross site scripting. The attack may be launched remotely. Upgrading to version 3.16 is able to address this issue. The name of the patch is 960cb060ce5e2964e6d716ff787c72fc18a371e7. It is recommended to apply a patch to fix this issue. VDB-215906 is the identifier assigned to this vulnerability. +++
  Link:      https://osv.dev/vulnerability/GHSA-287q-jfcp-9vhv
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'flask-caching 1.9.0' / FreeBSD port 'py39-flask-caching 1.9.0' is vulnerable:
  Please report to  maintainer 'rt@scientifics.de' for port 'www/py-flask-caching'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-flask-caching-1.9.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2021-13
  Aliases:   ['CVE-2021-33026', 'GHSA-656c-6cxf-hvcv']
  Details:   The Flask-Caching extension through 1.10.1 for Flask relies on Pickle for serialization, which may lead to remote code execution or local privilege escalation. If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2021-13
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-656c-6cxf-hvcv
  Aliases:   ['CVE-2021-33026']
  Details:   Flask-Cache adds easy cache support to Flask. The Flask-Caching extension through 1.10.1 for Flask relies on Pickle for serialization, which may lead to remote code execution or local privilege escalation. If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code. +++
  Link:      https://osv.dev/vulnerability/GHSA-656c-6cxf-hvcv
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'Flask-Cors 3.0.8' / FreeBSD port 'py39-Flask-Cors 3.0.8' is vulnerable:
  Please report to  maintainer 'stiginge@pvv.org' for port 'www/py-flask-cors'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-Flask-Cors-3.0.8 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2020-43
  Aliases:   ['CVE-2020-25032', 'GHSA-xc3p-ff3m-f46v']
  Details:   An issue was discovered in Flask-CORS (aka CORS Middleware for Flask) before 3.0.9. It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format. +++
  Fixed in:  ['3.0.9']
  Link:      https://osv.dev/vulnerability/PYSEC-2020-43
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-xc3p-ff3m-f46v
  Aliases:   ['CVE-2020-25032']
  Details:   An issue was discovered in Flask-CORS (aka CORS Middleware for Flask) before 3.0.9. It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format. +++
  Fixed in:  ['3.0.9']
  Link:      https://osv.dev/vulnerability/GHSA-xc3p-ff3m-f46v
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'flask-security 3.0.0' / FreeBSD port 'py39-flask-security 3.0.0_1' is vulnerable:
  Please report to  maintainer 'meka@tilda.center' for port 'www/py-flask-security'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-flask-security-3.0.0_1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-cg8c-gc2j-2wf7
  Aliases:   ['CVE-2021-23385']
  Details:   This affects all versions of package Flask-Security. When using the `get_post_logout_redirect` and `get_post_login_redirect` functions, it is possible to bypass URL validation and redirect a user to an arbitrary URL by providing multiple back slashes such as `\\\evil.com/path`. This vulnerability is only exploitable if an alternative WSGI server other than Werkzeug is used, or the default behaviour of Werkzeug is modified using `'autocorrect_location_header=False`. +++
  Link:      https://osv.dev/vulnerability/GHSA-cg8c-gc2j-2wf7
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'httpie 3.0.2' / FreeBSD port 'py39-httpie 3.0.2' is vulnerable:
  Please report to  maintainer 'ale@FreeBSD.org' for port 'www/py-httpie'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-httpie-3.0.2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2022-34
  Aliases:   ['CVE-2022-24737', 'GHSA-9w4w-cpc8-h2fq']
  Details:   HTTPie is a command-line HTTP client. HTTPie has the practical concept of sessions, which help users to persistently store some of the state that belongs to the outgoing requests and incoming responses on the disk for further usage. Before 3.1.0, HTTPie didnâ€˜t distinguish between cookies and hosts they belonged. This behavior resulted in the exposure of some cookies when there are redirects originating from the actual host to a third party website. Users are advised to upgrade. There are no known workarounds. +++
  Fixed in:  ['3.1.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-34
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2022-167
  Aliases:   ['CVE-2022-0430', 'GHSA-6pc9-xqrg-wfqw']
  Details:   Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository httpie/httpie prior to 3.1.0.
  Fixed in:  ['3.1.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-167
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-9w4w-cpc8-h2fq
  Aliases:   ['CVE-2022-24737']
  Details:   ### Impact
HTTPie have the practical concept of [sessions](https://httpie.io/docs/cli/sessions), which help users to persistently store some of the state that belongs to the outgoing requests and incoming responses on the disk for further usage. As an example, we can make an authenticated request and save it to a [named session](https://httpie.io/docs/cli/named-sessions) called `api`: +++
  Fixed in:  ['3.1.0']
  Link:      https://osv.dev/vulnerability/GHSA-9w4w-cpc8-h2fq
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-6pc9-xqrg-wfqw
  Aliases:   ['CVE-2022-0430']
  Details:   httpie is a modern, user-friendly command-line HTTP client for the API era. Prior to version 3.1.0, all cookies saved to session storage are supercookies. At this time, there is no known workaround. Users are recommended to update to version 3.1.0. +++
  Fixed in:  ['3.1.0']
  Link:      https://osv.dev/vulnerability/GHSA-6pc9-xqrg-wfqw
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'httpx 0.13.3' / FreeBSD port 'py39-httpx013 0.13.3_3' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'www/py-httpx013'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-httpx-0.24.0 (=W) (=C)
  py39-httpx013-0.13.3_3 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2022-183
  Aliases:   ['CVE-2021-41945', 'GHSA-h8pj-cxx2-jfg2']
  Details:   Encode OSS httpx <=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`. +++
  Fixed in:  ['0.20.0']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-183
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-h8pj-cxx2-jfg2
  Aliases:   ['CVE-2021-41945']
  Details:   Encode OSS httpx <=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`. +++
  Fixed in:  ['0.23.0']
  Link:      https://osv.dev/vulnerability/GHSA-h8pj-cxx2-jfg2
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'Scrapy 2.5.1' / FreeBSD port 'py39-Scrapy 2.5.1' is vulnerable:
  Please report to  maintainer 'skreuzer@FreeBSD.org' for port 'www/py-scrapy'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-Scrapy-2.5.1 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        PYSEC-2017-83
  Aliases:   ['CVE-2017-14158', 'GHSA-h7wm-ph43-c39p']
  Details:   Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore. +++
  Link:      https://osv.dev/vulnerability/PYSEC-2017-83
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        PYSEC-2022-159
  Aliases:   ['CVE-2022-0577', 'GHSA-cjvr-mfj7-j4j8']
  Details:   Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository scrapy/scrapy prior to 2.6.1.
  Fixed in:  ['2.6.1']
  Link:      https://osv.dev/vulnerability/PYSEC-2022-159
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-mfjm-vh54-3f96
  Details:   ### Impact

Responses from domain names whose public domain name suffix contains 1 or more periods (e.g. responses from `example.co.uk`, given its public domain name suffix is `co.uk`) are able to set cookies that are included in requests to any other domain sharing the same domain name suffix. +++
  Fixed in:  ['1.8.2', '2.6.0']
  Link:      https://osv.dev/vulnerability/GHSA-mfjm-vh54-3f96
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-cjvr-mfj7-j4j8
  Aliases:   ['CVE-2022-0577']
  Details:   ### Impact

If you manually define cookies on a [`Request`](https://docs.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Request) object, and that `Request` object gets a redirect response, the new `Request` object scheduled to follow the redirect keeps those user-defined cookies, regardless of the target domain. +++
  Fixed in:  ['1.8.2', '2.6.0']
  Link:      https://osv.dev/vulnerability/GHSA-cjvr-mfj7-j4j8
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-h7wm-ph43-c39p
  Aliases:   ['CVE-2017-14158']
  Details:   Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore. +++
  Link:      https://osv.dev/vulnerability/GHSA-h7wm-ph43-c39p
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-9x8m-2xpf-crp3
  Details:   ### Impact

When the [built-in HTTP proxy downloader middleware](https://docs.scrapy.org/en/2.6/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.httpproxy) processes a request with `proxy` metadata, and that `proxy` metadata includes proxy credentials, the built-in HTTP proxy downloader middleware sets the `Proxy-Authentication` header, but only if that header is not already set. +++
  Fixed in:  ['1.8.3', '2.6.2']
  Link:      https://osv.dev/vulnerability/GHSA-9x8m-2xpf-crp3
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'treq 20.9.0' / FreeBSD port 'py39-treq 20.9.0' is vulnerable:
  Please report to  maintainer 'contact@evilham.com' for port 'www/py-treq'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-treq-20.9.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-fhpf-pp6p-55qc
  Aliases:   ['CVE-2022-23607']
  Details:   ### Impact

Treq's request methods (`treq.get`, `treq.post`, `HTTPClient.request`, `HTTPClient.get`, etc.) accept cookies as a dictionary, for example: +++
  Fixed in:  ['22.1.0']
  Link:      https://osv.dev/vulnerability/GHSA-fhpf-pp6p-55qc
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'wagtail 4.2' / FreeBSD port 'py39-wagtail 4.2_2' is vulnerable:
  Please report to  maintainer 'sunpoet@FreeBSD.org' for port 'www/py-wagtail'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-wagtail-4.2_2 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-5286-f2rf-35c2
  Aliases:   ['CVE-2023-28836']
  Details:   ### Impact

A stored cross-site scripting (XSS) vulnerability exists on ModelAdmin views within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail admin could potentially craft pages and documents that, when viewed by a user with higher privileges, could perform actions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, and only affects sites with ModelAdmin enabled. +++
  Fixed in:  ['4.1.4', '4.2.2']
  Link:      https://osv.dev/vulnerability/GHSA-5286-f2rf-35c2
  Source:    osv

=> Package vulnerability already reported

PYSEC vulnerability:
  Id:        GHSA-33pv-vcgh-jfg9
  Aliases:   ['CVE-2023-28837']
  Details:   ### Impact

A memory exhaustion bug exists in Wagtail's handling of uploaded images and documents. For both images and documents, files are loaded into memory during upload for additional processing. A user with access to upload images or documents through the Wagtail admin interface could upload a file so large that it results in a crash or denial of service. +++
  Fixed in:  ['4.2.2', '4.1.4']
  Link:      https://osv.dev/vulnerability/GHSA-33pv-vcgh-jfg9
  Source:    osv

=> Package vulnerability already reported

--------------------------------------------------------------------------------
Python package 'WsgiDAV 3.1.0' / FreeBSD port 'py39-WsgiDAV 3.1.0' is vulnerable:
  Please report to  maintainer 'ultima@FreeBSD.org' for port 'www/py-wsgidav'
--------------------------------------------------------------------------------
Flavours and versions detection
Similar names, with (=W) for same WWW site and/or (=C) for same description:
  py39-WsgiDAV-3.1.0 (=W) (=C)
--------------------------------------------------------------------------------

PYSEC vulnerability:
  Id:        GHSA-xx6g-jj35-pxjv
  Aliases:   ['CVE-2022-41905']
  Details:   ### Impact
Implementations using this library with directory browsing enabled may be susceptible to [Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) attacks. +++
  Fixed in:  ['4.1.0']
  Link:      https://osv.dev/vulnerability/GHSA-xx6g-jj35-pxjv
  Source:    osv

=> Package vulnerability already reported

